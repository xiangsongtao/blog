{"componentChunkName":"component---src-templates-blog-post-js","path":"/Vue-zu-jian-kai-fa/","result":{"data":{"site":{"siteMetadata":{"title":"Attila","cover":"/background/1.jpg","description":"Thoughts, stories and ideas.","keywords":["烈风裘的博客","X-Blog","Attila","Gatsby","前端成长记录"],"tagCover":"/background/5.jpg","archiveCover":"/background/escape-flight.png","siteUrl":"https://xiangst0816.github.io/blog","logo":"","navigation":true,"subscribe":true}},"allAuthorJson":{"totalCount":2,"edges":[{"node":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/me.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"}},{"node":{"id":"WALL-E","bio":"还有要清理的吗?","avatar":"/avatar/cleaner.jpg","cover":"","github":null,"twitter":null,"zhihu":null,"weibo":null,"facebook":null,"website":null,"location":"Earth"}}]},"master":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/me.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"},"currentPost":{"html":"<p>软件编程界有一个<strong>面相对象</strong>的思想, 或者用另一句话就是<strong>为实例写模板</strong>, 初始化的时候调用模板(类)生成实例, 进行抽象化开发. 因此, 组件的开发和类的设计有着异曲同工之处.</p>\n<p>类的设计原则有以下几种, 分别是:</p>\n<ol>\n<li>单一职责原则</li>\n<li>接口隔离原则</li>\n<li>开放封闭原则</li>\n<li>依赖倒置原则</li>\n</ol>\n<p>关于这方面的资料网上介绍比较多, 这里我对此概念进行迁移, 用于解释 Vue 组件开发中需要考虑的原则.</p>\n<h2 id=\"关于设计原则\" style=\"position:relative;\"><a href=\"#%E5%85%B3%E4%BA%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99\" aria-label=\"关于设计原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关于设计原则</h2>\n<h3 id=\"1-单一职责\" style=\"position:relative;\"><a href=\"#1-%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3\" aria-label=\"1 单一职责 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 单一职责</h3>\n<p>这个比较好理解, 比如<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/alert\" target=\"_target\" rel=\"nofollow\">Alert</a>/<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/toast\" target=\"_target\" rel=\"nofollow\">Toast</a>/<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/action-sheet\" target=\"_target\" rel=\"nofollow\">Actionsheet</a>/<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/loading\" target=\"_target\" rel=\"nofollow\">Loading</a>等组件, 通过名字就能知道他们都是与用户交互的弹出层, 用于提示用户操作结果的.</p>\n<p>另外, 在 Alert/Actionsheet/Loading 中, 又有背景变黑的开关, 因此为了保证单一职责原则, 背景变黑这样的公共特性需要封装为独立的组件(<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/backdrop\" target=\"_target\" rel=\"nofollow\">Backdrop</a>).</p>\n<p>同样的例子在<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/input\" target=\"_target\" rel=\"nofollow\">Input 组件</a>编写时也有体现. Input 和 Textarea 组件两者有大部分的逻辑是共用的, 所以将共用的部分进行抽离放到<a href=\"https://github.com/DTFE/Vimo/blob/master/raw/components/input/mixin.vue\" target=\"_target\" rel=\"nofollow\">mixin</a>中.</p>\n<blockquote>\n<p>所以, 我认为<strong>区分组件的原子性是根据组件是否共用为参考的.</strong> 此外, 不建议过度的原子性. 因此, 正确的时机因该是当代码有重复可合并的情况下进行抽离.</p>\n</blockquote>\n<h3 id=\"2-接口隔离\" style=\"position:relative;\"><a href=\"#2-%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB\" aria-label=\"2 接口隔离 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 接口隔离</h3>\n<p>Vue 在设计组件的时候这方面就考虑的很周全. 目前(Vue2.x), <strong>Vue 组件对外只有三个 API:</strong></p>\n<ul>\n<li><strong>Prps:</strong> 外部传递组件数据</li>\n<li><strong>Events:</strong> 组件向外发送事件(可传递数据)</li>\n<li><strong>Slots:</strong> 外部逻辑整合到组件中(插槽)</li>\n</ul>\n<p>引入这张<strong>组件通讯</strong>图还是很必要的: <img src=\"http://cn.vuejs.org/images/props-events.png\" alt=\"组件通讯\"></p>\n<p>这张图中并没有 Slot, 是因为 Slot 中的内容组件是无法直接感知到. 关于组件使用的详细信息参考官网的<a href=\"http://cn.vuejs.org/v2/guide/components.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6%EF%BC%9F\" target=\"_target\" rel=\"nofollow\">组件开发教程</a>.</p>\n<blockquote>\n<p>因此, <strong>如果你在使用组件</strong>, 在向组件内传递数据, 或者监听组件的状态使用<em>Props</em>和<em>Events</em>就可以, 不建议通过 this 找<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi mathvariant=\"normal\">/</mi></mrow><annotation encoding=\"application/x-tex\">parent/</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">/</span></span></span></span>children 等方法获取组件的直接操作. <strong>另外, 如果是在编写开发组件, 那就随意了!</strong></p>\n</blockquote>\n<h3 id=\"3-开放封闭\" style=\"position:relative;\"><a href=\"#3-%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD\" aria-label=\"3 开放封闭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 开放封闭</h3>\n<h4 id=\"拓展开放\" style=\"position:relative;\"><a href=\"#%E6%8B%93%E5%B1%95%E5%BC%80%E6%94%BE\" aria-label=\"拓展开放 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>拓展开放</h4>\n<p>这部分也是 Vue 在设计组件的时候内置的功能: <a href=\"http://cn.vuejs.org/v2/api/#mixins\" target=\"_target\" rel=\"nofollow\">Mixins</a>和<a href=\"http://cn.vuejs.org/v2/api/#extends\" target=\"_target\" rel=\"nofollow\">Extends</a>.</p>\n<p>两个属性的功能类似, 简单的说就是将组件初始化的对象进行合并:</p>\n<ul>\n<li><strong>对于属性(包括 data/props/watch/methods/computed 等):</strong> 数据会进行合并替换, 原始组件的优先级最高;</li>\n<li><strong>对于钩子函数(created/mounted):</strong> Mixins/Extends 中定义的钩子不影响原始组件的钩子, 但是会优先执行 Mixins/Extends 中的定义.</li>\n</ul>\n<h5 id=\"区别\" style=\"position:relative;\"><a href=\"#%E5%8C%BA%E5%88%AB\" aria-label=\"区别 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>区别</h5>\n<ul>\n<li>传参: - Mixins 需要传入数组 - Extends 传入对象即可</li>\n<li>两者混用优先级: - 对于钩子函数: Extends > Mixins > Source - 对于属性: Source > Mixins > Extends</li>\n</ul>\n<blockquote>\n<p>这部分也是单一原则的实现方式</p>\n</blockquote>\n<h4 id=\"修改封闭\" style=\"position:relative;\"><a href=\"#%E4%BF%AE%E6%94%B9%E5%B0%81%E9%97%AD\" aria-label=\"修改封闭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>修改封闭</h4>\n<p>正常情况下, 不会涉及到使用组件内部的方法, <strong>组件对外全靠事件进行</strong>. 但是, 也有些情况在事件触发时传递组件的 this, 让业务能够执行组件内部方法改变组件状态, 比如<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/refresher\" target=\"_target\" rel=\"nofollow\">Refresher 组件</a>: 对外可调用内部两个方法:</p>\n<ul>\n<li><strong>complete():</strong> 异步数据请求成功后, 调用这个方法; refresher 将会关闭, 状态由<code class=\"language-text\">refreshing</code> -> <code class=\"language-text\">completing</code>.</li>\n<li><strong>cancel():</strong> 取消 refresher, 其状态由<code class=\"language-text\">refreshing</code> -> <code class=\"language-text\">cancelling</code></li>\n</ul>\n<p>因此, 保证这部分不会在组件更迭发生变化也是很重要的!</p>\n<h3 id=\"3-依赖倒置\" style=\"position:relative;\"><a href=\"#3-%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE\" aria-label=\"3 依赖倒置 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 依赖倒置</h3>\n<p>这部分讲的是<strong>降低组件和业务之间的耦合度</strong>, 组件只要明确了使用调用的文档, 业务按照文档进行组件使用即可. 组件发生任何更新迭代优化等升级只要不改变定义的文档即可.</p>\n<blockquote>\n<p><strong>组件面相抽象开发, 不依赖具体实现.</strong> 组件开发就是为了降低耦合度而进行的.</p>\n</blockquote>\n<h2 id=\"写组件之前的建议\" style=\"position:relative;\"><a href=\"#%E5%86%99%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%89%8D%E7%9A%84%E5%BB%BA%E8%AE%AE\" aria-label=\"写组件之前的建议 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写组件之前的建议</h2>\n<p>到这里我想到了<strong>“为人名服务”</strong>这句话, 也就是说开发组件前需要站在使用者角度考虑如何去使用这个组件. 所以我的做法如下:</p>\n<ol>\n<li>先写 DEMO 实例, 将所有数据交互及操作交互等内容涵盖到里面</li>\n<li>根据实例写文档, 规范 API, 这部分可以和有经验的同时交流</li>\n<li>准备实现具体逻辑</li>\n</ol>\n<h2 id=\"vue-组件的几种类型\" style=\"position:relative;\"><a href=\"#vue-%E7%BB%84%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E7%B1%BB%E5%9E%8B\" aria-label=\"vue 组件的几种类型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue 组件的几种类型</h2>\n<p>这部分简单介绍<a href=\"https://github.com/DTFE/Vimo\" target=\"_target\" rel=\"nofollow\">Vimo 框架</a>中使用到的几种组件类型的实现思路</p>\n<h3 id=\"1-弹出层组件\" style=\"position:relative;\"><a href=\"#1-%E5%BC%B9%E5%87%BA%E5%B1%82%E7%BB%84%E4%BB%B6\" aria-label=\"1 弹出层组件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 弹出层组件</h3>\n<p>关于弹出层组件之前是参考 mint-ui 来写的, 但是 vue 和 js 文件杂糅的方式导致职责不清, 比如<a href=\"https://github.com/ElemeFE/mint-ui/tree/master/packages/message-box/src\" target=\"_target\" rel=\"nofollow\">message-box 组件</a>, 关键部分代码流程如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1. 获取message-box.vue文件并extend</span>\n<span class=\"token keyword\">import</span> msgboxVue <span class=\"token keyword\">from</span> <span class=\"token string\">\"./message-box.vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> MessageBoxConstructor <span class=\"token operator\">=</span> Vue<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>msgboxVue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. 根据MessageBoxConstructor生成实例instance, 使用div包裹</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">initInstance</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageBoxConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  instance<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">=</span> defaultCallback<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3. 根据传入参数修改instance的属性, 然后挂到body上显示</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">showNextMsg</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">initInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> instance<span class=\"token punctuation\">.</span>closeTimer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msgQueue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      currentMsg <span class=\"token operator\">=</span> msgQueue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> currentMsg<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> prop <span class=\"token keyword\">in</span> options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          instance<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        instance<span class=\"token punctuation\">.</span>callback <span class=\"token operator\">=</span> defaultCallback<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">[</span><span class=\"token string\">\"modal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"showClose\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"closeOnClickModal\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"closeOnPressEscape\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">prop</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            instance<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Vue<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        instance<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这么做不好的地方如下:</p>\n<ol>\n<li>vue 并没有存在的意义, 直接写成 html 模板即可</li>\n<li>组件没有初始化的生命周期过程, 即 created/mounted 等钩子都不起作用</li>\n<li>js 部分包含了 vue 中的实现逻辑, vue 只是作为了模板存在</li>\n<li>message-box.vue 中定义的 prop 并没有发挥功能</li>\n<li>使用 setTimeout 判断组件的开闭动画是否完毕, 正常应该监听 transitionend 事件</li>\n</ol>\n<p>这部分也曾改写过很多次, 最终官网的一个 API<a href=\"http://cn.vuejs.org/v2/api/#propsData\" target=\"_target\" rel=\"nofollow\"><code class=\"language-text\">propsData</code></a>开启了一个新思路.</p>\n<ol>\n<li>先写普通组件一样先写弹出层组件,</li>\n<li>之后用<code class=\"language-text\">propsData</code>传递数据</li>\n<li>给<code class=\"language-text\">el</code>传递位置</li>\n<li>组件的开闭有组件 vue 自己控制, 外部的 js 文件只是做以上步骤, 例如这样: <a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/alert\" target=\"_target\" rel=\"nofollow\">Alert 组件</a></li>\n<li>组件具有完整的生命周期, 且 props 能够正常工作</li>\n</ol>\n<p>关键代码如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var Comp = Vue.extend({\n  props: [&#39;msg&#39;],\n  template: &#39;&lt;div&gt;{{ msg }}&lt;/div&gt;&#39;\n})\nvar vm = new Comp({\n  el: document.getElementById(position),\n  propsData: {\n    msg: &#39;hello&#39;\n  }\n})</code></pre></div>\n<h4 id=\"另外\" style=\"position:relative;\"><a href=\"#%E5%8F%A6%E5%A4%96\" aria-label=\"另外 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>另外</h4>\n<p>关于监听组件动画结束返回 Promise 的解决办法:</p>\n<ol>\n<li>使用<code class=\"language-text\">transition</code>的 js 钩子, <a href=\"http://cn.vuejs.org/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90\" target=\"_target\" rel=\"nofollow\">这里是说明.</a></li>\n<li>开启关闭的函数返回 Promise, 但是<code class=\"language-text\">resolve</code>方法在钩子中执行</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1. 开启返回Promise</span>\n<span class=\"token function\">present</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n     _this<span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>presentCallback <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// 2. transition中定义钩子</span>\n       <span class=\"token operator\">&lt;</span>transition name<span class=\"token operator\">=</span><span class=\"token string\">\"alert\"</span>\n                    v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>before<span class=\"token operator\">-</span>enter<span class=\"token operator\">=</span><span class=\"token string\">\"_beforeEnter\"</span>\n                    v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>after<span class=\"token operator\">-</span>enter<span class=\"token operator\">=</span><span class=\"token string\">\"_afterEnter\"</span>\n                    v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>before<span class=\"token operator\">-</span>leave<span class=\"token operator\">=</span><span class=\"token string\">\"_beforeLeave\"</span>\n                    v<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span>after<span class=\"token operator\">-</span>leave<span class=\"token operator\">=</span><span class=\"token string\">\"_afterLeave\"</span><span class=\"token operator\">></span>\n         <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n       <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>transition<span class=\"token operator\">></span>\n\n<span class=\"token comment\">//3. 在钩子中执行presentCallback</span>\n<span class=\"token function\">_afterEnter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n     <span class=\"token comment\">// 执行开启的promise</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">presentCallback</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3 id=\"2-父子组合组件\" style=\"position:relative;\"><a href=\"#2-%E7%88%B6%E5%AD%90%E7%BB%84%E5%90%88%E7%BB%84%E4%BB%B6\" aria-label=\"2 父子组合组件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 父子组合组件</h3>\n<p>这种组件组合方式类似于 HTML 中常用的<code class=\"language-text\">&lt;select&gt;</code>和<code class=\"language-text\">&lt;option&gt;</code>. 在 Vimo 中类似的组件有:<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/radio\" target=\"_target\" rel=\"nofollow\">Radio</a>/<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/segment\" target=\"_target\" rel=\"nofollow\">Segment</a>等, 大致的结构如下:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ParentComponent</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildrenComponent</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> value1 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ChildrenComponent</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ChildrenComponent</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>value2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> value2 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ChildrenComponent</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ParentComponent</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>前面说到, 组件使用需要遵循 Vue 定制的规范, 但是组件开发就没那么多限制, <code class=\"language-text\">ParentComponent</code>和<code class=\"language-text\">ChildrenComponent</code>是联动的关系, 因此需要定下他们之间的<strong>数据交互规则</strong>:</p>\n<ol>\n<li>初始化时, <code class=\"language-text\">ChildrenComponent</code>组件将自己的 this 传递给<code class=\"language-text\">ParentComponent</code>, 父组件记录下来</li>\n<li><code class=\"language-text\">ChildrenComponent</code>点击操作时, 调用<code class=\"language-text\">ParentComponent</code>组件的 onChildrenChange 函数, 传递自己的 value</li>\n<li><code class=\"language-text\">ParentComponent</code>组件得到 value 触发 input 更新 v-modal 值, 之后遍历子组件, 触发子组件的 refresh 方法, 传递 value</li>\n<li>子组件根据最新 value 更新自己的状态</li>\n<li>以上过程设置相应的对外事件</li>\n<li>父子组件组合需要设置 assert, 如果 assert 失败需要给出使用提示, 比如”两个组件需要组合使用…”</li>\n<li>子组件需要支持异步<code class=\"language-text\">v-for</code>填入,</li>\n<li><code class=\"language-text\">v-model</code>默认值能正确反映到子组件</li>\n</ol>\n<p>基本上按照以上的步骤就能搞定类似的组件啦, 不太明白的可以参考<a href=\"https://github.com/DTFE/Vimo/tree/master/raw/components/radio\" target=\"_target\" rel=\"nofollow\">Radio 组件</a>的写法.</p>\n<h3 id=\"3-其余\" style=\"position:relative;\"><a href=\"#3-%E5%85%B6%E4%BD%99\" aria-label=\"3 其余 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 其余</h3>\n<p>剩余的组件都比较好写了, 定好 props 和 event 就好, 比如:</p>\n<ul>\n<li>需要 Slot 部分</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Header</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Navbar</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Title</span><span class=\"token punctuation\">></span></span>Alert<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Title</span><span class=\"token punctuation\">></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Navbar</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Header</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>不需要 Slot 部分</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Toggle</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>displayData.dark<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@onChange</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onChangeHandler<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Toggle</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h2>\n<p>写组件需要对 Vue 的 API 语法有深入的了解, 写起来才会的心入手. 此外, 对于组件我持有的态度是, 能从 Github 中找到且不难的组件都不自己写, 快速看看源码没致命错误就好. 如果是业务定制性的组件, 先写在业务中, 如果共用, 则提取出来(比较懒, 😑)</p>","timeToRead":10,"wordCount":{"paragraphs":83,"sentences":97,"words":356},"fields":{"slug":"/Vue-zu-jian-kai-fa/","relativePath":"2017/2017-04-18---Vue-zu-jian-kai-fa/index.md"},"excerpt":"…","frontmatter":{"title":"Vue组件开发","date":"18 Apr 2017","tags":["Vue"],"cover":"http://upload-images.jianshu.io/upload_images/2036128-5338101e95178cce.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","comments":true,"author":"烈风裘"}},"nextPost":{"html":"<p>出现这个问题是因为我在排查 Toast 组的代码中, 发现现在的 API 调用感觉不够清晰, 有点像老奶奶的裹脚布一样长, 想修改但是不知道如何改.</p>\n<p>这里参看了很多相同组件的 API 设计, 百花齐放, 我也不知道该怎么办了.</p>\n<p>这里找了一篇文章说的挺好: <a href=\"http://www.woshipm.com/operate/32612.html\" target=\"_target\" rel=\"nofollow\">如何设计一个优秀的 API</a> , 可以参考下!</p>\n<h2 id=\"原则\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%88%99\" aria-label=\"原则 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原则</h2>\n<h3 id=\"对于用户\" style=\"position:relative;\"><a href=\"#%E5%AF%B9%E4%BA%8E%E7%94%A8%E6%88%B7\" aria-label=\"对于用户 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>对于用户:</h3>\n<ol>\n<li>易学习：有完善的文档及提供尽可能多的示例和可 copy－paste 的代码，像其他设计工作一样，你应该应用最小惊讶原则。</li>\n<li>易使用：没有复杂的程序、复杂的细节，易于学习；灵活的 API 允许按字段排序、可自定义分页、 排序和筛选等。一个完整的 API 意味着被期望的功能都包含在内。</li>\n<li>难误用：对详细的错误提示，有些经验的用户可以直接使用 API 而不需要阅读文档。</li>\n</ol>\n<h3 id=\"对于开发者\" style=\"position:relative;\"><a href=\"#%E5%AF%B9%E4%BA%8E%E5%BC%80%E5%8F%91%E8%80%85\" aria-label=\"对于开发者 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>对于开发者:</h3>\n<ol>\n<li>易阅读：代码的编写只需要一次一次，但是当调试或者修改的时候都需要对代码进行阅读。</li>\n<li>易开发：个最小化的接口是使用尽可能少的类以及尽可能少的类成员。这样使得理解、记忆、调试以及改变 API 更容易。</li>\n</ol>\n<h2 id=\"开发\" style=\"position:relative;\"><a href=\"#%E5%BC%80%E5%8F%91\" aria-label=\"开发 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>开发</h2>\n<ol>\n<li>站在用户的角度</li>\n<li>后续的需求能拓展</li>\n<li>尽量少的做事儿是抑制 API 设计错误的有效方案</li>\n<li>对外文档清晰和规范,</li>\n<li>方法优于属性</li>\n<li>工厂方法优于构造函数</li>\n<li>避免过多继承</li>\n<li>避免由于优化或者复用代码影响 API</li>\n<li>面向接口编程</li>\n<li>扩展参数应当是便利的</li>\n<li>对组件进行合理定位，确定暴露多少接口</li>\n<li>提供扩展点</li>\n</ol>","timeToRead":2,"wordCount":{"paragraphs":24,"sentences":24,"words":71},"fields":{"slug":"/ru-he-she-ji-zu-jian-de-di-API/","relativePath":"2017/2017-03-19---ru-he-she-ji-zu-jian-de-di-API/index.md"},"excerpt":"出现这个问题是因为我在排查 Toast 组的代码中, 发现现在的 API 调用感觉不够清晰, 有点像老奶奶的裹脚布一样长, 想修改但是不知道如何改. 这里参看了很多相同组件的 API…","frontmatter":{"title":"如何设计组件的API","date":"19 Mar 2017","tags":["思考"],"cover":"","comments":true,"author":"烈风裘"}},"prevPost":{"html":"<p>梳理这部分是因为在使用组件模式开发 h5 应用会出现组件样式修改未生效的问题，在解决样式修改的问题前，需要理清楚 CSS 样式生效的优先级。样式根据引入和声明需要分开介绍，分为<strong>引入样式优先级</strong>和<strong>声明样式优先级</strong>。</p>\n<h2 id=\"引入样式优先级\" style=\"position:relative;\"><a href=\"#%E5%BC%95%E5%85%A5%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7\" aria-label=\"引入样式优先级 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>引入样式优先级</h2>\n<p>引入样式优先级一般是在外部样式、内部样式、内联样式之间应用同一个样式的情况是使用， 优先级如下：</p>\n<ul>\n<li><strong>外部样式</strong> | <strong>内部样式</strong> &#x3C; <strong>内联样式</strong></li>\n<li><strong>外部样式</strong>和<strong>内部样式</strong>，最后出现的优先级最高，例如：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- 内联样式 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n     <span class=\"token comment\">/* 内部样式 */</span>\n     <span class=\"token selector\">h3</span><span class=\"token punctuation\">{</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>green<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- 外部样式 style.css --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>因此，对于一些重置的样式集，比如<strong>normalize.css/reset.css</strong>必须写在所有样式的前面。</p>\n<blockquote>\n<p>PS: 没有外联样式，<a href=\"http://www.w3school.com.cn/html/html_css.asp\" target=\"_target\" rel=\"nofollow\">参考</a>。</p>\n</blockquote>\n<h2 id=\"声明样式优先级\" style=\"position:relative;\"><a href=\"#%E5%A3%B0%E6%98%8E%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7\" aria-label=\"声明样式优先级 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>声明样式优先级</h2>\n<h3 id=\"1-大致的优先级\" style=\"position:relative;\"><a href=\"#1-%E5%A4%A7%E8%87%B4%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7\" aria-label=\"1 大致的优先级 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 大致的优先级</h3>\n<p>一般来说满这个规则：</p>\n<ul>\n<li>继承不如指定</li>\n<li>!important > 内联 > ID > Class|属性|伪类 > 元素选择器</li>\n<li>:link、:visited、:hover、:active 按照 LVHA（LoVe HAte）顺序定义</li>\n</ul>\n<p>上面是优先级算法反映出的大致结果，在一般的开发中熟记即可。如果需要进一步研究原理，则了解下优先级算法。</p>\n<h3 id=\"2-优先级算法\" style=\"position:relative;\"><a href=\"#2-%E4%BC%98%E5%85%88%E7%BA%A7%E7%AE%97%E6%B3%95\" aria-label=\"2 优先级算法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 优先级算法</h3>\n<p>选择器的特殊性值分为四个等级，如下：</p>\n<table>\n<thead>\n<tr>\n<th>等级</th>\n<th>标签内选择符</th>\n<th>ID 选择符</th>\n<th>Class 选择符/属性选择符/伪类选择符</th>\n<th>元素选择符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>示例</td>\n<td><code class=\"language-text\">&lt;span style=&quot;color:red;&quot;&gt;</code></td>\n<td><code class=\"language-text\">#text{color:red;}</code></td>\n<td><code class=\"language-text\">.text{color:red;} [type=&quot;text&quot;]{color:red}</code></td>\n<td><code class=\"language-text\">span{color:red;}</code></td>\n</tr>\n<tr>\n<td>标记位</td>\n<td>x,0,0,0</td>\n<td>0,x,0,0</td>\n<td>0,0,x,0</td>\n<td>0,0,0,x</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"特点\" style=\"position:relative;\"><a href=\"#%E7%89%B9%E7%82%B9\" aria-label=\"特点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特点:</h4>\n<ul>\n<li>每个等级的初始值为 0，</li>\n<li>每个等级的叠加为选择器出<strong>现的次数相加</strong></li>\n<li>不可进位，比如<code class=\"language-text\">0,99,99,99</code></li>\n<li>依次表示为：0,0,0,0</li>\n<li>每个等级计数之间没关联</li>\n<li>等级判断从左向右，如果某一位数值相同，则判断下一位数值</li>\n<li>如果两个优先级相同，则最后出现的优先级高，<code class=\"language-text\">!important</code>也适用</li>\n<li>通配符选择器的特殊性值为：<code class=\"language-text\">0,0,0,0</code></li>\n<li><strong>继承样式优先级最低</strong>，通配符样式优先级高于继承样式</li>\n</ul>\n<h4 id=\"计算示例：\" style=\"position:relative;\"><a href=\"#%E8%AE%A1%E7%AE%97%E7%A4%BA%E4%BE%8B%EF%BC%9A\" aria-label=\"计算示例： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算示例：</h4>\n<ul>\n<li><code class=\"language-text\">a{color: yellow;} /*特殊性值：0,0,0,1*/</code></li>\n<li><code class=\"language-text\">div a{color: green;} /*特殊性值：0,0,0,2*/</code></li>\n<li><code class=\"language-text\">.demo a{color: black;} /*特殊性值：0,0,1,1*/</code></li>\n<li><code class=\"language-text\">.demo input[type=&quot;text&quot;]{color: blue;} /*特殊性值：0,0,2,1*/</code></li>\n<li><code class=\"language-text\">.demo *[type=&quot;text&quot;]{color: grey;} /*特殊性值：0,0,2,0*/</code></li>\n<li><code class=\"language-text\">#demo a{color: orange;} /*特殊性值：0,1,0,1*/</code></li>\n<li><code class=\"language-text\">div#demo a{color: red;} /*特殊性值：0,1,0,2*/</code></li>\n</ul>\n<h4 id=\"生效示例：\" style=\"position:relative;\"><a href=\"#%E7%94%9F%E6%95%88%E7%A4%BA%E4%BE%8B%EF%BC%9A\" aria-label=\"生效示例： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生效示例：</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第一条应该是黄色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!--适用第1行规则--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>第二条应该是蓝色<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token comment\">&lt;!--适用第4、5行规则，第4行优先级高--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第三条应该是黑色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!--适用第2、3行规则，第3行优先级高--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>第四条应该是红色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!--适用第6、7行规则，第7行优先级高--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"关于伪类-lvha-的解释\" style=\"position:relative;\"><a href=\"#%E5%85%B3%E4%BA%8E%E4%BC%AA%E7%B1%BB-lvha-%E7%9A%84%E8%A7%A3%E9%87%8A\" aria-label=\"关于伪类 lvha 的解释 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>关于伪类 LVHA 的解释</h4>\n<p>a 标签有四种状态：链接访问前、链接访问后、鼠标滑过、激活，分别对应四种伪类:link、:visited、:hover、:active；</p>\n<ul>\n<li>当鼠标滑过 a 链接时，满足<code class=\"language-text\">:link</code>和<code class=\"language-text\">:hover</code>两个伪类，要改变 a 标签的颜色，就必须将:hover 伪类在:link 伪类后面声明；</li>\n<li>当鼠标点击激活 a 链接时，同时满足:link、:hover、:active 三种状态，要显示 a 标签激活时的样式（:active），必须将:active 声明放到:link 和:hover 之后。因此得出 LVHA 这个顺序。</li>\n</ul>\n<p>这个顺序能不能变？可以，但也只有:link 和:visited 可以交换位置，因为一个链接要么访问过要么没访问过，不可能同时满足，也就不存在覆盖的问题。</p>\n<h2 id=\"在组件中的应用\" style=\"position:relative;\"><a href=\"#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8\" aria-label=\"在组件中的应用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在组件中的应用</h2>\n<p>目前的前端开发为了增加开发效率，会对常用组件进行封装，此外，组件还会添加一些必要的结构样式。但是业务的设计文稿中可不一定按照预先写好的默认样式，需要在开发业务时根据组件的 DOM 结构修改默认样式，此时会出现样式不生效的问题。</p>\n<p>例如下面的结构，如果对 Title 直接增加样式类，则肯定不会生效，因为 Title 的 DOM 结构为两层(组件样式定义规定不能使用 ID 选择器，且类选择器满足最小标记原则)），故样式最多为<code class=\"language-text\">0,0,2,x</code>。因此，样式多层标记就可提高自定义样式的优先级，例如下方的 SCSS 写法。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Page</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Header</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test__header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Navbar</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Title</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test__header--title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Toolbar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Navbar</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Header</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Content</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Page</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token selector\">.test </span><span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">.test__header </span><span class=\"token punctuation\">{</span>\n    <span class=\"token selector\">.test__header--title </span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>此外，对于<code class=\"language-text\">Page</code>组件的样式标记策略推荐使用<strong>金字塔形(树形)</strong>，比如上面的 SCSS 书写，这样可以保证内部自定义样式不会受到外部干扰，减少不必要的麻烦。</p>\n</blockquote>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"http://www.cnblogs.com/wangmeijian/p/4207433.html\" target=\"_target\" rel=\"nofollow\">css 优先级计算规则</a></li>\n<li><a href=\"http://blog.csdn.net/jie1336950707/article/details/49046371\" target=\"_target\" rel=\"nofollow\">关于 CSS 的优先级,CSS 优先级计算,多个 class 引用</a></li>\n<li><a href=\"http://www.w3school.com.cn/html/html_css.asp\" target=\"_target\" rel=\"nofollow\">样式表定义</a></li>\n</ul>","timeToRead":6,"wordCount":{"paragraphs":49,"sentences":49,"words":181},"fields":{"slug":"/CSS-you-xian-ji-ji-suan-ji-ying-yong/","relativePath":"2017/2017-05-24---CSS-you-xian-ji-ji-suan-ji-ying-yong/index.md"},"excerpt":"梳理这部分是因为在使用组件模式开发 h5 应用会出现组件样式修改未生效的问题，在解决样式修改的问题前，需要理清楚 CSS…","frontmatter":{"title":"CSS优先级计算及应用","date":"24 May 2017","tags":["CSS"],"cover":"","comments":true,"author":"烈风裘"}}},"pageContext":{"curr":"/Vue-zu-jian-kai-fa/","prev":"/CSS-you-xian-ji-ji-suan-ji-ying-yong/","next":"/ru-he-she-ji-zu-jian-de-di-API/"}},"staticQueryHashes":["3240721340","63159454"]}