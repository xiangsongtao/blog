{"componentChunkName":"component---src-templates-blog-post-js","path":"/JavaScript-he-hu-xin-ji-neng-nai-dian/","result":{"data":{"site":{"siteMetadata":{"title":"Attila","cover":"/background/1.jpg","description":"Thoughts, stories and ideas.","keywords":["烈风裘的博客","X-Blog","Attila","Gatsby","前端成长记录"],"tagCover":"/background/5.jpg","archiveCover":"/background/escape-flight.png","siteUrl":"https://xiangst0816.github.io/blog","logo":"","navigation":true,"subscribe":true}},"allAuthorJson":{"totalCount":2,"edges":[{"node":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/avatar.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"}},{"node":{"id":"WALL-E","bio":"还有要清理的吗?","avatar":"/avatar/cleaner.jpg","cover":"","github":null,"twitter":null,"zhihu":null,"weibo":null,"facebook":null,"website":null,"location":"Earth"}}]},"master":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/avatar.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"},"currentPost":{"html":"<blockquote>\n<p>下面列出来的是 JavaScript 总结大纲，详细内容会继续展开，待续。。</p>\n</blockquote>\n<h2 id=\"基础\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E7%A1%80\" aria-label=\"基础 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基础</h2>\n<ul>\n<li>\n<p>数据类型相关</p>\n<ul>\n<li>基础类型(Number/String/Boolean/Null/undefined)</li>\n<li>引用类型(object/function/array/date)</li>\n<li>深浅拷贝</li>\n<li>类型对应的操作方法</li>\n</ul>\n</li>\n<li>\n<p>函数相关</p>\n<ul>\n<li>内部属性(this)</li>\n<li>外部属性(arguments/length/name/protorype)</li>\n<li>call/apply</li>\n<li>bind</li>\n<li>作用域及作用域链</li>\n<li>类/闭包/原型继承</li>\n<li>模块化</li>\n<li>错误及调试</li>\n</ul>\n</li>\n<li>\n<p>Ajax</p>\n<ul>\n<li>创建过程</li>\n<li>响应码 readystate</li>\n<li>跨域请求</li>\n<li>请求方式</li>\n<li>jsonp</li>\n</ul>\n</li>\n<li>\n<p>jQuery</p>\n<ul>\n<li>流式 API</li>\n<li>DOM 操作</li>\n<li>通用工具及方法</li>\n<li>选择器及事件队列</li>\n<li>ajax 方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"进阶\" style=\"position:relative;\"><a href=\"#%E8%BF%9B%E9%98%B6\" aria-label=\"进阶 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进阶</h2>\n<ul>\n<li>雅虎军规熟记</li>\n<li>代码优化</li>\n<li>HTML/CSS/JavaScript 书写结构优化</li>\n<li>请求优化</li>\n<li>合理分流</li>\n<li>\n<p>移动端性能优化</p>\n<ul>\n<li>网络传输优化</li>\n<li>DOM 操作优化</li>\n<li>内存资源优化</li>\n<li>体验优化</li>\n</ul>\n</li>\n<li>\n<p>常见算法</p>\n<ul>\n<li>冒泡排序</li>\n<li>插入排序</li>\n<li>希尔排序</li>\n<li>快速排序</li>\n</ul>\n</li>\n<li>\n<p>数据结构</p>\n<ul>\n<li>数组</li>\n<li>列表</li>\n<li>栈</li>\n<li>队列</li>\n<li>链表</li>\n<li>字典</li>\n<li>散列</li>\n<li>集合</li>\n<li>二叉树</li>\n<li>图</li>\n<li>排序算法</li>\n<li>检索算法</li>\n</ul>\n</li>\n<li>\n<p>高性能 JavaScript</p>\n<ul>\n<li>脚本加载和执行</li>\n<li>数据存储</li>\n<li>DOM 操作</li>\n<li>算法和流程控制</li>\n<li>字符串及正则</li>\n<li>控制 js 处理时长</li>\n<li>ajax 异步数据的运用</li>\n<li>语言使用习惯(eval/with/new/原生方法)</li>\n<li>js 压缩/Gzip/md5 命名/CDN</li>\n</ul>\n</li>\n<li>\n<p>常用 JS 框架</p>\n<ul>\n<li>reactjs</li>\n<li>vuejs</li>\n<li>angularjs 1.x</li>\n<li>jquery</li>\n<li>zepto</li>\n<li>lodash</li>\n<li>nodejs</li>\n<li>express</li>\n</ul>\n</li>\n<li>\n<p>构建工具</p>\n<ul>\n<li>gulp</li>\n<li>webpack</li>\n<li>fis</li>\n<li>yeoman</li>\n</ul>\n</li>\n<li>\n<p>MVC/MVVM 概念</p>\n<ul>\n<li>区别</li>\n<li>框架代表</li>\n<li>使用范围</li>\n</ul>\n</li>\n<li>\n<p>ECMAScript5</p>\n<ul>\n<li>语法</li>\n<li>babel</li>\n<li>promise</li>\n</ul>\n</li>\n</ul>","timeToRead":2,"wordCount":{"paragraphs":89,"sentences":89,"words":136},"fields":{"slug":"/JavaScript-he-hu-xin-ji-neng-nai-dian/","relativePath":"2016/2016-12-27---JavaScript-he-hu-xin-ji-neng-nai-dian/index.md"},"excerpt":"下面列出来的是 JavaScript 总结大纲，详细内容会继续展开，待续。。 基础 数据类型相关 基础类型(Number/String/Boolean/Null/undefined) 引用类型(object…","frontmatter":{"title":"JavaScript 核心技能点","date":"27 Dec 2016","tags":["随笔"],"cover":"","comments":true,"author":"烈风裘"}},"nextPost":{"html":"<p>这个是在组件开发中遇到的问题，当时我在编写 button 的组件，模板是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>disable-hover button ion-button<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[modeClass,typeClass,shapeClass,sizeClass,colorClass,roleClass,strongClass]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-effect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>使用是这样子的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ion-button @click.native=&quot;primary()&quot; color=&quot;primary&quot;&gt;primary&lt;/ion-button&gt;</code></pre></div>\n<p>根据 Vue2.0 官方文档关于父子组件通讯的原则，父组件通过 prop 传递数据给子组件，子组件触发事件给父组件。但父组件想在子组件上监听自己的 click 的话，需要加上<code class=\"language-text\">native</code>修饰符，故写法就像上面这样。</p>\n<p>好吧，处女座的毛病又来了。像 button 这样常用的组件如果加上 native 的话是感觉很突兀的。虽然组件设计有自身的考虑，因此我想将 click 的 native 去掉，思路如下：</p>\n<ol>\n<li>子组件监听父组件给的 click 事件，</li>\n<li>子组件内部处理 click 事件然后向外发送 click 事件：<code class=\"language-text\">$emit(&quot;click&quot;.fn)</code></li>\n</ol>\n<p>改造后的代码如下(亲测可用)：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>disable-hover button ion-button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_click<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>[modeClass,typeClass,shapeClass,sizeClass,colorClass,roleClass,strongClass]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>slot</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-effect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">_click</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inner'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>父组件中这样使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ion-button @click=&quot;primary()&quot; color=&quot;primary&quot;&gt;primary&lt;/ion-button&gt;</code></pre></div>\n<p>也许读者能看出来，我正在参照 IONIC2.X 的组件 API 写 Vue2.0 的功能组件，目前只完成了：ActionSheet、Button、Icon、Alert、Toast 这几个，一边看 IONIC 源码，一边将思路总结写成 Vue 代码，也就是花点时间。积累自己的组件库希望以后能开发快点。</p>\n<p>现在项目地址在<a href=\"https://github.com/xiangsongtao/VueMobile\" target=\"_target\" rel=\"nofollow\">这里</a>，前期以实现功能为主，不建议用在生产环境，读读代码实现思路就好，中文备注都做好了。</p>\n<p>(完)</p>","timeToRead":2,"wordCount":{"paragraphs":11,"sentences":11,"words":73},"fields":{"slug":"/Vue2-zhi-qu-diao-zu-jian-de-di/","relativePath":"2016/2016-12-25---Vue2-zhi-qu-diao-zu-jian-de-di/index.md"},"excerpt":"这个是在组件开发中遇到的问题，当时我在编写 button 的组件，模板是这样的： 使用是这样子的： 根据 Vue2.0 官方文档关于父子组件通讯的原则，父组件通过 prop…","frontmatter":{"title":"Vue2之去掉组件的click事件的native修饰","date":"25 Dec 2016","tags":["Vue"],"cover":"","comments":true,"author":"烈风裘"}},"prevPost":{"html":"<p>埋点适用于分析用户的使用行为，通过搜集分析数据推进用户体验，进而优化产品或者挖掘用户习惯推出新产品等。</p>\n<p>埋点方式分为前端和后端，这里主要谈谈前端的实现。埋点方案现在业界已经比较成熟了，可分为：有码埋点、可视化埋点、无码埋点三种，<a href=\"http://www.jianshu.com/p/afd601e07bf0\" target=\"_target\" rel=\"nofollow\">这里是介绍</a>。简单的说就是这样：</p>\n<ul>\n<li>有码埋点: 埋点锚点植入业务代码中描述 优点 缺点埋点锚点植入业务代码中(JS 或者 HTML 中) 高耦合，精确控制 技术人员手工添加修改因为无代码，不移维护修改，易出错，埋点前的方案都清楚</li>\n<li>可视化埋点 通过元素的页面结构定位埋点位置，业务代码与埋点代码分离 可对线上代码修改，</li>\n</ul>\n<h4 id=\"有码埋点\" style=\"position:relative;\"><a href=\"#%E6%9C%89%E7%A0%81%E5%9F%8B%E7%82%B9\" aria-label=\"有码埋点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>有码埋点</h4>\n<p>熟悉 Google Analytics 的同学都知道这个，除了 PV 统计外，GA 还提供了追踪访客和网站的互动的功能，尤其是追踪那些不产生新页面的访问行为（例如下载文件），很多类似的产品都叫自定义事件功能，说的就是它。有码埋点是目前业内最为熟悉且被广泛采用的一种数据接入手段。</p>\n<p>拿 Google Analytics 为例，可以利用_trackEvent()方法来进行事件追踪。它的详细参数如下：_trackEvent(category, action, opt<em>label, opt</em>value, opt_noninteraction)</p>\n<ul>\n<li>category（必需）：类别</li>\n<li>action（必需）：和用户的行为对应，例如“下载”</li>\n<li>label：标签，其他有关信息</li>\n<li>value：提供数值型数据</li>\n<li>non-interaction：布尔值。</li>\n</ul>\n<p>如果你想在追踪链接的，给需要追踪的链接调用_trackEvent()方法并设置参数，加上调用的方法 onclick 即可。优点是可以对发送的内容做到精准控制，对于上线后影响因素较小数据埋点它无疑是最适用的。缺点也很明显，对页面元素的埋点都需要手工添加代码，工作量无疑是巨大的，必须是技术人员参与才能完成，埋点地方过多也容易出错。代码埋点的理想化在于事先把数据收集方案都想明白，而在实际情况下很难做到。</p>\n<h4 id=\"可视化埋点\" style=\"position:relative;\"><a href=\"#%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9F%8B%E7%82%B9\" aria-label=\"可视化埋点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>可视化埋点</h4>\n<p>有码埋点无疑是苦逼的，成本高而且容易出错，如果想修改的话还得重新上线，尤其对 APP 开发者来说更是苦难，漫长的审核期客户端的更新成本都是不容忽略的。</p>\n<p>所以为了解决这些问题，有些专业做数据分析的厂商提出来更加敏捷和聪明的方案，以 Kissmetrics 和 Mixpanel 为代表的数据分析服务商提供了可视化埋点的方案，以 Click to Track 的方式代替了手工埋点，<strong>实现了埋点的配置与应用本身的分离</strong>，每次用户打开应用时，只需要把新的埋点配置重新下载到客户端即可，而无须频繁更新客户端版本。拿 Kissmetrics 为例，</p>","timeToRead":2,"wordCount":{"paragraphs":16,"sentences":16,"words":115},"fields":{"slug":"/guan-yu-mai-man-dian-qian-jian-tan/","relativePath":"2017/2017-01-22---guan-yu-mai-man-dian-qian-jian-tan/index.md"},"excerpt":"…","frontmatter":{"title":"关于埋点浅谈","date":"22 Jan 2017","tags":["埋点"],"cover":"","comments":true,"author":"烈风裘"}}},"pageContext":{"curr":"/JavaScript-he-hu-xin-ji-neng-nai-dian/","prev":"/guan-yu-mai-man-dian-qian-jian-tan/","next":"/Vue2-zhi-qu-diao-zu-jian-de-di/"}},"staticQueryHashes":["3240721340","63159454"]}