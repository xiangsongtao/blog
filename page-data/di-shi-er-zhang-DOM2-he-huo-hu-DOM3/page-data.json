{"componentChunkName":"component---src-templates-blog-post-js","path":"/di-shi-er-zhang-DOM2-he-huo-hu-DOM3/","result":{"data":{"site":{"siteMetadata":{"title":"Attila","cover":"/background/1.jpg","description":"Thoughts, stories and ideas.","keywords":["烈风裘的博客","X-Blog","Attila","Gatsby","前端成长记录"],"tagCover":"/background/5.jpg","archiveCover":"/background/escape-flight.png","siteUrl":"https://xiangst0816.github.io/blog","logo":"","navigation":true,"subscribe":true}},"allAuthorJson":{"totalCount":2,"edges":[{"node":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/me.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"}},{"node":{"id":"WALL-E","bio":"还有要清理的吗?","avatar":"/avatar/cleaner.jpg","cover":"","github":null,"twitter":null,"zhihu":null,"weibo":null,"facebook":null,"website":null,"location":"Earth"}}]},"master":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/me.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"},"currentPost":{"html":"<h3 id=\"1-为什么code-classlanguage-textelestylecode属性获取到的样式信息不全\" style=\"position:relative;\"><a href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88code-classlanguage-textelestylecode%E5%B1%9E%E6%80%A7%E8%8E%B7%E5%8F%96%E5%88%B0%E7%9A%84%E6%A0%B7%E5%BC%8F%E4%BF%A1%E6%81%AF%E4%B8%8D%E5%85%A8\" aria-label=\"1 为什么code classlanguage textelestylecode属性获取到的样式信息不全 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 为什么<code class=\"language-text\">ele.style</code>属性获取到的样式信息不全?</h3>\n<p>这个 style 对象 是 CSSStyleDeclaration 的实例，包含着<strong>通过 HTML 的 style 特性指定</strong>的所有样式信息，但<strong>不包含</strong>与<strong>外部</strong>样式表或<strong>嵌入</strong>样式表经层叠而来的样式。</p>\n<blockquote>\n<p>不同方式定义的样式(<code class=\"language-text\">&lt;link&gt;</code>/<code class=\"language-text\">&lt;script&gt;</code>/在元素上定义)是有差异的!!!</p>\n</blockquote>\n<p>使用<code class=\"language-text\">getComputedStyle()</code>可以获取包含当前元素的<strong>所有计算的样式</strong>. 方法接收两个参数: 要取得计算样式的元素和一个伪元素字符串（例如”:after”）</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> myDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myDiv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> computedStyle <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>defaultView<span class=\"token punctuation\">.</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>myDiv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>注意<strong>综合属性</strong>的返回值, 比如 border</li>\n<li>无论在哪个浏览器中，最重要的一条是要记住所有计算的样式都是<strong>只读</strong>的</li>\n</ul>\n<h3 id=\"2-getboundingclientrect获取元素尺寸\" style=\"position:relative;\"><a href=\"#2-getboundingclientrect%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E5%B0%BA%E5%AF%B8\" aria-label=\"2 getboundingclientrect获取元素尺寸 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. getBoundingClientRect()获取元素尺寸</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> scrollTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> scrollLeft <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollLeft<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>getBoundingClientRect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">!=</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      temp<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>cssText <span class=\"token operator\">=</span> <span class=\"token string\">\"position:absolute;left:0;top:0;\"</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>top <span class=\"token operator\">-</span> scrollTop<span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      temp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> rect <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> offset <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      left<span class=\"token operator\">:</span> rect<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span>\n      right<span class=\"token operator\">:</span> rect<span class=\"token punctuation\">.</span>right <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span>\n      top<span class=\"token operator\">:</span> rect<span class=\"token punctuation\">.</span>top <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">,</span>\n      bottom<span class=\"token operator\">:</span> rect<span class=\"token punctuation\">.</span>bottom <span class=\"token operator\">+</span> offset\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> actualLeft <span class=\"token operator\">=</span> <span class=\"token function\">getElementLeft</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> actualTop <span class=\"token operator\">=</span> <span class=\"token function\">getElementTop</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      left<span class=\"token operator\">:</span> actualLeft <span class=\"token operator\">-</span> scrollLeft<span class=\"token punctuation\">,</span>\n      right<span class=\"token operator\">:</span> actualLeft <span class=\"token operator\">+</span> element<span class=\"token punctuation\">.</span>offsetWidth <span class=\"token operator\">-</span> scrollLeft<span class=\"token punctuation\">,</span>\n      top<span class=\"token operator\">:</span> actualTop <span class=\"token operator\">-</span> scrollTop<span class=\"token punctuation\">,</span>\n      bottom<span class=\"token operator\">:</span> actualTop <span class=\"token operator\">+</span> element<span class=\"token punctuation\">.</span>offsetHeight <span class=\"token operator\">-</span> scrollTop\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-dom-遍历接口\" style=\"position:relative;\"><a href=\"#3-dom-%E9%81%8D%E5%8E%86%E6%8E%A5%E5%8F%A3\" aria-label=\"3 dom 遍历接口 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. DOM 遍历接口</h3>\n<p>实际使用比较少, 可能会在 VDOM 中使用. IE9+</p>\n<h3 id=\"4-如何获取页面滚动高度\" style=\"position:relative;\"><a href=\"#4-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8%E9%AB%98%E5%BA%A6\" aria-label=\"4 如何获取页面滚动高度 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 如何获取页面滚动高度?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> scrollTop <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>scrollY<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">document.documentElement.scrollTop</code>的兼容性不太好.</p>","timeToRead":2,"wordCount":{"paragraphs":11,"sentences":13,"words":43},"fields":{"slug":"/di-shi-er-zhang-DOM2-he-huo-hu-DOM3/","relativePath":"2018/2018-03-05---di-shi-er-zhang-DOM2-he-huo-hu-DOM3/index.md"},"excerpt":"1. 为什么属性获取到的样式信息不全? 这个 style 对象 是 CSSStyleDeclaration 的实例，包含着通过 HTML 的 style…","frontmatter":{"title":"第十二章 DOM2和DOM3","date":"05 Mar 2018","tags":["JS高程"],"cover":"","comments":true,"author":"烈风裘"}},"nextPost":{"html":"<h3 id=\"1-dom-选择符-api\" style=\"position:relative;\"><a href=\"#1-dom-%E9%80%89%E6%8B%A9%E7%AC%A6-api\" aria-label=\"1 dom 选择符 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DOM 选择符 API</h3>\n<p>根据 <strong>CSS 选择符</strong> 选择与某个模式匹配的 DOM 元素.</p>\n<ul>\n<li><code class=\"language-text\">querySelector()</code></li>\n</ul>\n<p>IE8+, 返回第一个匹配的 Node</p>\n<ul>\n<li><code class=\"language-text\">querySelectorAll()</code></li>\n</ul>\n<p>IE8+, 返回 NodeList</p>\n<ul>\n<li><code class=\"language-text\">matchesSelector()</code></li>\n</ul>\n<p>IE9+, 如果调用元素与该选择符匹配，返回 true；否则，返回 false。</p>\n<p>这个 API 并未全部支持, 可用下面方式使用:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">matchesSelector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>matchesSelector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">matchesSelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>msMatchesSelector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">msMatchesSelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>mozMatchesSelector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">mozMatchesSelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>webkitMatchesSelector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">webkitMatchesSelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not supported.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">matchesSelector</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span> <span class=\"token string\">\"body.page1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//执行操作</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-elementnode-类型-node-查询增强-api\" style=\"position:relative;\"><a href=\"#2-elementnode-%E7%B1%BB%E5%9E%8B-node-%E6%9F%A5%E8%AF%A2%E5%A2%9E%E5%BC%BA-api\" aria-label=\"2 elementnode 类型 node 查询增强 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. ElementNode 类型 Node 查询增强 API</h3>\n<ul>\n<li>childElementCount：返回子元素（不包括文本节点和注释）的个数。</li>\n<li>firstElementChild：指向第一个子元素；firstChild 的元素版。</li>\n<li>lastElementChild：指向最后一个子元素；lastChild 的元素版。</li>\n<li>previousElementSibling：指向前一个同辈元素；previousSibling 的元素版。</li>\n<li>nextElementSibling：指向后一个同辈元素；nextSibling 的元素版。</li>\n</ul>\n<p>支持情况: IE 9+</p>\n<h3 id=\"3-html5-中操作code-classlanguage-textclasscode属性的方法和传统方法的对比\" style=\"position:relative;\"><a href=\"#3-html5-%E4%B8%AD%E6%93%8D%E4%BD%9Ccode-classlanguage-textclasscode%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E4%BC%A0%E7%BB%9F%E6%96%B9%E6%B3%95%E7%9A%84%E5%AF%B9%E6%AF%94\" aria-label=\"3 html5 中操作code classlanguage textclasscode属性的方法和传统方法的对比 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. HTML5 中操作<code class=\"language-text\">class</code>属性的方法和传统方法的对比?</h3>\n<ul>\n<li>传统方法使用<code class=\"language-text\">className</code>属性对字符串的处理来更改 class:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//删除\"user\"类</span>\n\n<span class=\"token comment\">//首先，取得类名字符串并拆分成数组</span>\n<span class=\"token keyword\">var</span> classNames <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>className<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\s+/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//找到要删的类名 var pos = -1, i, len;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> classNames<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classNames<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//删除类名</span>\nclassNames<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//把剩下的类名拼成字符串并重新设置</span>\ndiv<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> classNames<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>HTML5 使用<code class=\"language-text\">classList</code>属性, Firefox 3.6+和 Chrome</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//删除\"disabled\"类</span>\ndiv<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disabled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//添加\"current\"类</span>\ndiv<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"current\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//切换\"user\"类</span>\ndiv<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//确定元素中是否包含既定的类名</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bd\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disabled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//执行操作</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//迭代类名</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"4-焦点管理\" style=\"position:relative;\"><a href=\"#4-%E7%84%A6%E7%82%B9%E7%AE%A1%E7%90%86\" aria-label=\"4 焦点管理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 焦点管理</h3>\n<ul>\n<li><code class=\"language-text\">document.activeElement()</code>: 始终会引用 DOM 中当前获得了焦点的元素</li>\n<li><code class=\"language-text\">document.hasFocus()</code>: 用于确定文档是否获得了焦点</li>\n</ul>\n<h3 id=\"5-htmldocument-的变化\" style=\"position:relative;\"><a href=\"#5-htmldocument-%E7%9A%84%E5%8F%98%E5%8C%96\" aria-label=\"5 htmldocument 的变化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. HTMLDocument 的变化</h3>\n<h4 id=\"documentreadystate\" style=\"position:relative;\"><a href=\"#documentreadystate\" aria-label=\"documentreadystate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>document.readyState</h4>\n<p>通过它来实现一个指示文档已经加载完成的指示器, 支持情况: IE4+</p>\n<ul>\n<li>loading，正在加载文档；</li>\n<li>complete，已经加载完文档。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">docReady</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    document<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token string\">\"complete\"</span> <span class=\"token operator\">||</span>\n    document<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token string\">\"interactive\"</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/* istanbul ignore next */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">completed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"documentcompatmode\" style=\"position:relative;\"><a href=\"#documentcompatmode\" aria-label=\"documentcompatmode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>document.compatMode</h4>\n<ul>\n<li>标准模式(CSS1Compat), 比如 doctype 设置为<code class=\"language-text\">&lt;!DOCTYPE html&gt;</code>时</li>\n<li>混杂模式(BackCompat, 向后兼容模式)的 doctype 可以是:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>判断代码:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>compatMode <span class=\"token operator\">==</span> <span class=\"token string\">\"CSS1Compat\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"标准模式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \"BackCompat\"</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"混杂模式, 向后兼容模式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"documenthead\" style=\"position:relative;\"><a href=\"#documenthead\" aria-label=\"documenthead permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>document.head</h4>\n<p>作为对 document.body 引用文档的<body>元素的补充，HTML5 新增了 document.head 属性， 引用文档的<head>元素</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> head <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>head <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"6-html5-中自定义数据属性的应用-如何兼容不支持浏览器\" style=\"position:relative;\"><a href=\"#6-html5-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7%E7%9A%84%E5%BA%94%E7%94%A8-%E5%A6%82%E4%BD%95%E5%85%BC%E5%AE%B9%E4%B8%8D%E6%94%AF%E6%8C%81%E6%B5%8F%E8%A7%88%E5%99%A8\" aria-label=\"6 html5 中自定义数据属性的应用 如何兼容不支持浏览器 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. HTML5 中自定义数据属性的应用? 如何兼容不支持浏览器?</h3>\n<ul>\n<li>用于元素渲染外的信息, 需要添加”data-”头, 但是获取时不需要”data”.</li>\n<li>用于<strong>跟踪连接/混搭引用/插件参数/埋点数据</strong>等应用</li>\n<li>Firefox 6+和 Chrome</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myDiv<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-appId</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>12345<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-myname</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Nicholas<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//本例中使用的方法仅用于演示</span>\n<span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myDiv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//取得自定义属性的值</span>\n<span class=\"token keyword\">var</span> appId <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>appId<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myName <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>myname<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//设置值</span>\ndiv<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>appId <span class=\"token operator\">=</span> <span class=\"token number\">23456</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>myname <span class=\"token operator\">=</span> <span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果不兼容, 可参考下面代码:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myDiv<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  myDiv<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"valueXX\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置自定义属性</span>\n  <span class=\"token keyword\">var</span> theValue <span class=\"token operator\">=</span> myDiv<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取自定义属性</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  myDiv<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data-attribute\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"valueXX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置自定义属性</span>\n  <span class=\"token keyword\">var</span> theValue <span class=\"token operator\">=</span> myDiv<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data-attribute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取自定义属性</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"7-插入标记字符串的方式有哪些及优势和问题\" style=\"position:relative;\"><a href=\"#7-%E6%8F%92%E5%85%A5%E6%A0%87%E8%AE%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8F%8A%E4%BC%98%E5%8A%BF%E5%92%8C%E9%97%AE%E9%A2%98\" aria-label=\"7 插入标记字符串的方式有哪些及优势和问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 插入标记字符串的方式有哪些及优势和问题?</h3>\n<p>传统的方式是通过创建一个个节点再拼接插入, 量大会比较麻烦, 有三种形式可以使用:</p>\n<h4 id=\"innerhtml\" style=\"position:relative;\"><a href=\"#innerhtml\" aria-label=\"innerhtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>innerHTML</h4>\n<ul>\n<li>读模式: 获取指定节点的<strong>所有子节点对应的 HTML 标记字符串</strong>.</li>\n<li>写模式: 根据指定的值创建新的 DOM 树, 然后在用这个 DOM 数完全<strong>替换调用元素原先的所有子节点</strong></li>\n<li><strong>不要指望所有浏览器返回的值时是一致的</strong></li>\n<li><strong>写和读两次的值也可能不一样</strong>, 原因是返回的字符串是根据原始 HTML 字符串创建的 DOM 数经过序列化后的结果</li>\n<li>插入<code class=\"language-text\">&lt;script&gt;</code> 时可能会有些限制, 在大多数浏览器中，通过 innerHTML 插入 <code class=\"language-text\">&lt;script&gt;</code> 元素并不会执行其中的脚本(<strong>IE8 及更早版本是唯一能在这种情况下执行脚本的浏览器</strong>，但必须满足一 些条件。解决办法就是在插入的 script 前再插入一个有作用域的元素, 比如文本/空字符的 div/<strong>隐藏的 input(首选)</strong>等).</li>\n<li>插入脚本还是使用别的方式吧</li>\n<li>插入<code class=\"language-text\">&lt;style&gt;</code>大多数浏览器都支持, IE8 及更早版本的 Hack 这里不做说明, 代码如下:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">div<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;style type=\"text/css\">body {background-color: red; }&lt;/style>'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"outerhtml\" style=\"position:relative;\"><a href=\"#outerhtml\" aria-label=\"outerhtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>outerHTML</h4>\n<p>用法和 innerHTML 类似, 不过是所有结果都包含自身.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 使用 outerHTML 属性以下面这种方式设置值：</span>\ndiv<span class=\"token punctuation\">.</span>outerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;p>This is a paragraph.&lt;/p>\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 这行代码完成的操作与下面这些 DOM 脚本代码一样：</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a paragraph.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"insertadjacenthtml\" style=\"position:relative;\"><a href=\"#insertadjacenthtml\" aria-label=\"insertadjacenthtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>insertAdjacentHTML()</h4>\n<p>四个插入位置的字符串说明如下代码所示, 字符串说明会比较难懂:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//作为前一个同辈元素插入</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforebegin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;p>Hello world!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//作为第一个子元素插入</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterbegin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;p>Hello world!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//作为最后一个子元素插入</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeend\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;p>Hello world!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//作为后一个同辈元素插入</span>\nelement<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"afterend\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;p>Hello world!&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"内存与性能问题注意\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98%E4%B8%8E%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E6%B3%A8%E6%84%8F\" aria-label=\"内存与性能问题注意 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存与性能问题注意</h4>\n<ul>\n<li>使用上述 API 比单独创建元素要高效的多, 建议使用</li>\n<li>删除元素前<strong>别忘记解绑事件监听</strong>, 否则出现内存泄露</li>\n<li>这是 innerHTML 或者 outerHTML 会创建 HTML 解析器, 一次频繁创建会影响性能, <strong>建议控制调用上述三个 API 的次数</strong>, 比如缓存字符串中间结果</li>\n</ul>\n<h3 id=\"8-scrollintoview方法\" style=\"position:relative;\"><a href=\"#8-scrollintoview%E6%96%B9%E6%B3%95\" aria-label=\"8 scrollintoview方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. scrollIntoView()方法</h3>\n<h3 id=\"8-在移动端当键盘遮挡输入框该如何处理\" style=\"position:relative;\"><a href=\"#8-%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BD%93%E9%94%AE%E7%9B%98%E9%81%AE%E6%8C%A1%E8%BE%93%E5%85%A5%E6%A1%86%E8%AF%A5%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86\" aria-label=\"8 在移动端当键盘遮挡输入框该如何处理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 在移动端当键盘遮挡输入框该如何处理?</h3>\n<blockquote>\n<p>文章来源: <a href=\"https://github.com/justjavac/the-front-end-knowledge-you-may-dont-know/issues/3\" target=\"_target\" rel=\"nofollow\">https://github.com/justjavac/the-front-end-knowledge-you-may-dont-know/issues/3</a></p>\n</blockquote>\n<p>使用<code class=\"language-text\">Element.scrollIntoViewIfNeeded(opt_center)</code>, 就是在需要的时候将元素滚动到可视区域。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//让元素可见, 窗口滚动 之后会让调用元素的顶部与视口顶部尽可能平齐</span>\ndocument<span class=\"token punctuation\">.</span>forms<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>forms<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Safari 和 Chrome 实现了这个方法</span>\ndocument<span class=\"token punctuation\">.</span>forms<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoViewIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 只是让元素可见</span>\ndocument<span class=\"token punctuation\">.</span>forms<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","timeToRead":8,"wordCount":{"paragraphs":61,"sentences":62,"words":224},"fields":{"slug":"/di-shi-yi-zhang-DOM-tuo-ta-zhi-zhan/","relativePath":"2018/2018-03-04---di-shi-yi-zhang-DOM-tuo-ta-zhi-zhan/index.md"},"excerpt":"1. DOM 选择符 API 根据 CSS 选择符 选择与某个模式匹配的 DOM 元素.  IE8+, 返回第一个匹配的 Node  IE8+, 返回 NodeList  IE…","frontmatter":{"title":"第十一章 DOM拓展","date":"04 Mar 2018","tags":["JS高程"],"cover":"","comments":true,"author":"烈风裘"}},"prevPost":{"html":"<blockquote>\n<p>这里所说的事件是指: JavaScript 和 HTML 之间交互的事件. 也就是说, 浏览器文档在交互的过程中会以事件的方式通知绑定的<strong>监听器</strong>. 这里使用了传统软件工程的<strong>观察者模式</strong>的设计模型, 实现<strong>JavaScript</strong>与<strong>文档(HTML/CSS)</strong>之间的解耦.</p>\n</blockquote>\n<h3 id=\"1-事件流理解\" style=\"position:relative;\"><a href=\"#1-%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%90%86%E8%A7%A3\" aria-label=\"1 事件流理解 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 事件流理解?</h3>\n<p>事件流描述的是从页面中接收事件的顺序.</p>\n<p>“DOM2 级事件” 规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">从Document开始 -- 捕获阶段 --&gt; ( 目标阶段 -- 冒泡阶段 --&gt; Document)</code></pre></div>\n<p>目标阶段是冒泡阶段的一部分.</p>\n<h3 id=\"2-这样绑定事件处理程序的问题\" style=\"position:relative;\"><a href=\"#2-%E8%BF%99%E6%A0%B7%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"2 这样绑定事件处理程序的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 这样绑定事件处理程序的问题?</h3>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click Me<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert(this.value)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>定义绑定事件的函数可能晚于用户点击交互导致报错</li>\n<li>这样扩展事件处理程序的作用域链在不同浏览器中会导致不同结果</li>\n<li>耦合紧密, 维护麻烦</li>\n<li>只能绑定一个</li>\n</ul>\n<h3 id=\"3-下面这样添加事件处理程序的问题\" style=\"position:relative;\"><a href=\"#3-%E4%B8%8B%E9%9D%A2%E8%BF%99%E6%A0%B7%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"3 下面这样添加事件处理程序的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 下面这样添加事件处理程序的问题?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"myBtn\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>只能绑定一个</li>\n</ul>\n<h3 id=\"4-code-classlanguage-textbtnaddeventlistenereventname-handler-usecapturecode接收的第三个参数是\" style=\"position:relative;\"><a href=\"#4-code-classlanguage-textbtnaddeventlistenereventname-handler-usecapturecode%E6%8E%A5%E6%94%B6%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%E6%98%AF\" aria-label=\"4 code classlanguage textbtnaddeventlistenereventname handler usecapturecode接收的第三个参数是 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <code class=\"language-text\">btn.addEventListener(eventName, handler, useCapture)</code>接收的第三个参数是?</h3>\n<p>最后这个布尔值参数如果是 true，表示在捕获 阶段调用事件处理程序；如果是 false，表示在冒泡阶段调用事件处理程序</p>\n<blockquote>\n<p>IE9、Firefox、Safari、Chrome 和 Opera 支持 DOM2 级事件处理程序。</p>\n</blockquote>\n<h3 id=\"5-在-ie-中使用code-classlanguage-textbtnattacheventcode的问题\" style=\"position:relative;\"><a href=\"#5-%E5%9C%A8-ie-%E4%B8%AD%E4%BD%BF%E7%94%A8code-classlanguage-textbtnattacheventcode%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"5 在 ie 中使用code classlanguage textbtnattacheventcode的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 在 IE 中使用<code class=\"language-text\">btn.attachEvent</code>的问题?</h3>\n<ul>\n<li>事件处理函数中的 this 指向的是 window</li>\n<li>可添加多个事件, 但是是<strong>以相反的顺序被触发的</strong></li>\n<li>只在冒泡阶段触发</li>\n</ul>\n<blockquote>\n<p>IE8-</p>\n</blockquote>\n<h3 id=\"6-事件对象中-code-classlanguage-textthiscode--code-classlanguage-texttargetcode--code-classlanguage-textcurrenttargetcode三个属性的含义\" style=\"position:relative;\"><a href=\"#6-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E4%B8%AD-code-classlanguage-textthiscode--code-classlanguage-texttargetcode--code-classlanguage-textcurrenttargetcode%E4%B8%89%E4%B8%AA%E5%B1%9E%E6%80%A7%E7%9A%84%E5%90%AB%E4%B9%89\" aria-label=\"6 事件对象中 code classlanguage textthiscode  code classlanguage texttargetcode  code classlanguage textcurrenttargetcode三个属性的含义 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 事件对象中, <code class=\"language-text\">this</code> / <code class=\"language-text\">target</code> / <code class=\"language-text\">currentTarget</code>三个属性的含义?</h3>\n<ul>\n<li><code class=\"language-text\">this</code>: 指向<strong>绑定事件处理函数的元素</strong></li>\n<li><code class=\"language-text\">currentTarget</code>: 同<code class=\"language-text\">this</code></li>\n<li><code class=\"language-text\">target</code>: 指向<strong>事件真正的目标</strong>, 可能因为真正的目标没绑定这个事件处理函数, 因此冒泡到了外面</li>\n</ul>\n<p>如果绑定的元素没有子元素, 则, 三者相等; 如果是事件代理, 则<code class=\"language-text\">target</code>指向真正触发事件的元素. 事件代理可以对<code class=\"language-text\">target</code>进行判断.</p>\n<h3 id=\"7-事件对象中的code-classlanguage-texteventtypecode有什么作用\" style=\"position:relative;\"><a href=\"#7-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84code-classlanguage-texteventtypecode%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8\" aria-label=\"7 事件对象中的code classlanguage texteventtypecode有什么作用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 事件对象中的<code class=\"language-text\">event.type</code>有什么作用?</h3>\n<p>如果监听被触发, 则<code class=\"language-text\">event.type</code>和绑定时的<code class=\"language-text\">eventName</code>相同, 一般用于区分在元素上绑定的事件类型, 处理不同类型的事件绑定情形.</p>\n<h3 id=\"8-事件对象中的code-classlanguage-textpreventdefaultcode有什么作用\" style=\"position:relative;\"><a href=\"#8-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84code-classlanguage-textpreventdefaultcode%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8\" aria-label=\"8 事件对象中的code classlanguage textpreventdefaultcode有什么作用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 事件对象中的<code class=\"language-text\">preventDefault()</code>有什么作用?</h3>\n<p>阻止特定事件的默认行为, 只有 cancelable 属性设置为 true 的事件，才可以使用 preventDefault()来取消其默认行为。</p>\n<p>例如，链接的默认行为就是在 被单击时会导航到其 href 特性指定的 URL。</p>\n<h3 id=\"9-事件对象中的code-classlanguage-texteventstoppropagationcode有什么作用\" style=\"position:relative;\"><a href=\"#9-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84code-classlanguage-texteventstoppropagationcode%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8\" aria-label=\"9 事件对象中的code classlanguage texteventstoppropagationcode有什么作用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. 事件对象中的<code class=\"language-text\">event.stopPropagation()</code>有什么作用?</h3>\n<p>立即停止事件在 DOM 层次中的传播(<strong>Stop Propagation</strong>)，即取消进一步的事件 <strong>捕获或冒泡</strong>。</p>\n<h3 id=\"10-事件对象中的code-classlanguage-texteventphasecode含义\" style=\"position:relative;\"><a href=\"#10-%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84code-classlanguage-texteventphasecode%E5%90%AB%E4%B9%89\" aria-label=\"10 事件对象中的code classlanguage texteventphasecode含义 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10. 事件对象中的<code class=\"language-text\">eventPhase</code>含义?</h3>\n<ul>\n<li><code class=\"language-text\">eventPhase===1</code>: 在<strong>捕获阶段</strong>调用的事件处理程序</li>\n<li><code class=\"language-text\">eventPhase===2</code>: 如果事件处理程序处于目标对象上时(实测没出现过)</li>\n<li><code class=\"language-text\">eventPhase===3</code>: 在<strong>冒泡阶段</strong>调用的事件处理程序</li>\n</ul>\n<h3 id=\"11-判断页面加载完毕的属性和事件有哪些\" style=\"position:relative;\"><a href=\"#11-%E5%88%A4%E6%96%AD%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%AF%95%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%9C%89%E5%93%AA%E4%BA%9B\" aria-label=\"11 判断页面加载完毕的属性和事件有哪些 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11. 判断页面加载完毕的属性和事件有哪些?</h3>\n<p><strong>判断</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token string\">\"complete\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>监听</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span> completed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>load</strong>和<strong>DOMContentLoaded</strong>两个事件的区别?</p>\n<ul>\n<li>当初始 HTML 文档被完全加载和解析时，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架完成加载。</li>\n<li>另一个不同的事件 load <strong>会在页面中的一切都加载完毕时触发</strong>。</li>\n<li>DOMContentLoaded 这个事件始终都会在 load 事件之前触发</li>\n<li>DOMContentLoaded 目标实际上是 document</li>\n<li>在不同页面中，load 事件与 readystatechange 事件并 不能保证以相同的顺序触发</li>\n</ul>\n<p>所以可以知道，当一个页面加载时应<strong>先触发 DOMContentLoaded 然后才是 onload</strong>. 类似的事件及区别包括以下几类：</p>\n<ul>\n<li>DOMContentLoaded: 在形成完整的 DOM 树之后就会触发， 不理会图像、JavaScript 文件、CSS 文件或其他资源是否已经下载完毕。</li>\n<li>readystatechange: 一个 document 的 Document.readyState 属性描述了文档的加载状态，当这个状态发生了变化，就会触发该事件；</li>\n<li>load: 在页面中的一切都加载完毕时触发，但这个<strong>过程可能会因为要加载的外部资源过多而颇费周折</strong>。</li>\n<li>beforeunload: 当浏览器窗口，文档或其资源将要卸载时，会触发 beforeunload 事件。</li>\n<li>unload: 当文档或一个子资源正在被卸载时, 触发 unload 事件。</li>\n</ul>\n<h3 id=\"12-能发出-load-事件的地方有哪些\" style=\"position:relative;\"><a href=\"#12-%E8%83%BD%E5%8F%91%E5%87%BA-load-%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9C%B0%E6%96%B9%E6%9C%89%E5%93%AA%E4%BA%9B\" aria-label=\"12 能发出 load 事件的地方有哪些 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12. 能发出 load 事件的地方有哪些?</h3>\n<ul>\n<li>window</li>\n<li>img</li>\n<li>script</li>\n<li>link</li>\n</ul>\n<h3 id=\"13-code-classlanguage-textresizecode和code-classlanguage-textscrollcode事件使用注意\" style=\"position:relative;\"><a href=\"#13-code-classlanguage-textresizecode%E5%92%8Ccode-classlanguage-textscrollcode%E4%BA%8B%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F\" aria-label=\"13 code classlanguage textresizecode和code classlanguage textscrollcode事件使用注意 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>13. <code class=\"language-text\">resize</code>和<code class=\"language-text\">scroll</code>事件使用注意?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scroll\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> scrollTop <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取scrollTop</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>scroll 事件是在 window 对象上发生的</strong>，但它实际表示的则是页面中相应元素的变化</li>\n<li>所有浏览器都会通过<code class=\"language-text\">&lt;html&gt;</code>元素来反映这一变化, 就是<code class=\"language-text\">document.documentElement</code></li>\n<li>监听函数会频繁执行, 1) 函数节流; 2)有必要尽量保持事件处理程序的代码简单; 3)使用 raf</li>\n<li>scroll 也可以在元素上监听</li>\n</ul>\n<h3 id=\"14-焦点事件有哪些-使用场景是\" style=\"position:relative;\"><a href=\"#14-%E7%84%A6%E7%82%B9%E4%BA%8B%E4%BB%B6%E6%9C%89%E5%93%AA%E4%BA%9B-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%98%AF\" aria-label=\"14 焦点事件有哪些 使用场景是 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>14. 焦点事件有哪些, 使用场景是?</h3>\n<p>用于获取用户在页面上的行踪.</p>\n<p><strong>document 上:</strong></p>\n<ul>\n<li>document.hasFocus()</li>\n<li>document.activeElement</li>\n</ul>\n<p><strong>元素上:</strong></p>\n<ul>\n<li>focusin</li>\n<li>focus</li>\n<li>focusout</li>\n</ul>\n<h3 id=\"15-关于鼠标事件的一些注意点\" style=\"position:relative;\"><a href=\"#15-%E5%85%B3%E4%BA%8E%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9\" aria-label=\"15 关于鼠标事件的一些注意点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>15. 关于鼠标事件的一些注意点</h3>\n<ul>\n<li>除了 mouseenter 和 mouseleave，所有鼠标事件都会冒泡， 也可以被取消，而取消鼠标事件将会影响浏览器的默认行为</li>\n<li>只有在同一个元素上相继触发 mousedown 和 mouseup 事件， 才会触发 click 事件；如果 mousedown 或 mouseup 中的一个被取消，就不会触发 click 事件.</li>\n</ul>\n<h3 id=\"16-鼠标事件对象中的位置属性-clientxpagexscreenx-等的含义\" style=\"position:relative;\"><a href=\"#16-%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E5%B1%9E%E6%80%A7-clientxpagexscreenx-%E7%AD%89%E7%9A%84%E5%90%AB%E4%B9%89\" aria-label=\"16 鼠标事件对象中的位置属性 clientxpagexscreenx 等的含义 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>16. 鼠标事件对象中的位置属性 clientX/pageX/screenX 等的含义</h3>\n<ul>\n<li>clientX/clientY: 以<strong>浏览器页面窗口为边距</strong>的位置</li>\n<li>pageX/pageY: 以<strong>页面为边距</strong>的位置, 比如存在 scroll 时</li>\n<li>screenX/screenY: 以<strong>系统的显示器为边距</strong>的位置</li>\n</ul>\n<h3 id=\"17-鼠标键和修改键的组合如何实现\" style=\"position:relative;\"><a href=\"#17-%E9%BC%A0%E6%A0%87%E9%94%AE%E5%92%8C%E4%BF%AE%E6%94%B9%E9%94%AE%E7%9A%84%E7%BB%84%E5%90%88%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\" aria-label=\"17 鼠标键和修改键的组合如何实现 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>17. 鼠标键和修改键的组合如何实现?</h3>\n<p>这些修改键就是 Shift、Ctrl、Alt 和 Meta（在 Windows 键盘中是 Windows 键，在苹果机中 是 Cmd 键），它们经常被用来修改鼠标事件的行为。DOM 为此规定了 4 个属性，表示这些修改键的状态：shiftKey、ctrlKey、altKey 和 metaKey。例如:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>shiftKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  keys<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shift\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"18-鼠标右键单击事件如何实现\" style=\"position:relative;\"><a href=\"#18-%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E5%8D%95%E5%87%BB%E4%BA%8B%E4%BB%B6%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\" aria-label=\"18 鼠标右键单击事件如何实现 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>18. 鼠标右键单击事件如何实现?</h3>\n<p>对于 mousedown 和 mouseup 事件来说，则在其 event 对象存在一个 button 属性， 表示按下或释放的按钮。</p>\n<p>DOM 的 button 属性可能有如下 3 个值：0 表示主鼠标按钮，1 表示中间的鼠 标按钮（鼠标滚轮按钮），2 表示次鼠标按钮。</p>\n<p>但是 IE8-的返回值有比较大的差异, 需要注意!.</p>\n<h3 id=\"19-textinput-事件和-keypress-事件的区别\" style=\"position:relative;\"><a href=\"#19-textinput-%E4%BA%8B%E4%BB%B6%E5%92%8C-keypress-%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB\" aria-label=\"19 textinput 事件和 keypress 事件的区别 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>19. textInput 事件和 keypress 事件的区别?</h3>\n<ul>\n<li>textInput 事件主要考虑的是<strong>字符</strong>，因此它的 event 对象中还包含一个 data 属性，这个属 性的值就是用户输入的字符（而非字符编码）</li>\n<li>是任何可以获得焦点的元素都可以触发 keypress 事件，但<strong>只有可编辑区域才能触发 textInput 事件</strong></li>\n<li>textInput 事件只会在<strong>用户按下能够输入实际字符的键</strong>时才会被触发，而 keypress 事件则在按下那些能够影响文本显示的键时也会触发（例如退格键）</li>\n<li>支持 textInput 属 性的浏览器有 IE9+、Safari 和 Chrome。</li>\n</ul>\n<h3 id=\"20-dom-变动增删改是否能检测-如何检测\" style=\"position:relative;\"><a href=\"#20-dom-%E5%8F%98%E5%8A%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%98%AF%E5%90%A6%E8%83%BD%E6%A3%80%E6%B5%8B-%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8B\" aria-label=\"20 dom 变动增删改是否能检测 如何检测 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>20. DOM 变动(增删改)是否能检测, 如何检测?</h3>\n<ul>\n<li>DOMSubtreeModified: 整个 DOM 结构变更是触发</li>\n<li>DOMNodeInserted: 子节点插入另一个节点时触发</li>\n<li>DOMNodeRemoved: 节点从其父节点移除时触发</li>\n<li>DOMNodeInsertedIntoDocument: 节点插入到<strong>文档中</strong>时触发</li>\n<li>DOMNodeRemovedFromDocument: 节点从<strong>文档中</strong>删除时触发</li>\n<li>DOMAttrModified: 节点属性被修改时触发</li>\n<li>DOMCharacterDataModified: 文本节点的值发生变化时触发</li>\n</ul>\n<p>IE9+</p>\n<p><strong><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\" target=\"_target\" rel=\"nofollow\">MutationObserver</a></strong></p>\n<blockquote>\n<p>MutationObserver 给开发者们提供了一种能在某个范围内的 DOM 树发生变化时作出适当反应的能力.该 API 设计用来替换掉在 DOM3 事件规范中引入的 Mutation 事件.</p>\n</blockquote>\n<ul>\n<li>它等待所有脚本任务完成后，才会运行，即采用异步方式。</li>\n<li>它把 DOM 变动记录封装成一个数组进行处理，而不是一条条地个别处理 DOM 变动。</li>\n<li>它既可以观察发生在 DOM 的所有类型变动，也可以观察某一类变动。</li>\n</ul>\n<p>IE11+</p>\n<h3 id=\"21-内存和性能注意点\" style=\"position:relative;\"><a href=\"#21-%E5%86%85%E5%AD%98%E5%92%8C%E6%80%A7%E8%83%BD%E6%B3%A8%E6%84%8F%E7%82%B9\" aria-label=\"21 内存和性能注意点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>21: 内存和性能注意点</h3>\n<ul>\n<li>事件委托</li>\n</ul>\n<p>通过<code class=\"language-text\">event.target</code>获取点击的元素; 通过<code class=\"language-text\">event.type</code>获取事件类型.</p>\n<ul>\n<li>移除无用的事件</li>\n</ul>\n<p>比如删除 DOM 后移除绑定的事件, 只能手动解除.</p>\n<h3 id=\"22-模拟事件的过程是怎样的\" style=\"position:relative;\"><a href=\"#22-%E6%A8%A1%E6%8B%9F%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84\" aria-label=\"22 模拟事件的过程是怎样的 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>22. 模拟事件的过程是怎样的?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myBtn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//创建事件对象</span>\n<span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MouseEvents\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//初始化事件对象</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">initMouseEvent</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span>defaultView<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//触发事件</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里的事件包括:</p>\n<ul>\n<li>UIEvents: UIEvent, initUIEvent</li>\n<li>MouseEvents: MouseEvent, initMouseEvent</li>\n<li>MutationEvents: MutationEvent, initMutationEvent</li>\n<li>HTMLEvents: 一般化的 HTML 事件</li>\n<li>CustomEvents: CustomEvent, initCustomEvent, 自定义事件</li>\n</ul>\n<p>例如 HTMLEvents 事件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HTMLEvents\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">initEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"focus\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntarget<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"23-如何自定义事件并触发\" style=\"position:relative;\"><a href=\"#23-%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E5%B9%B6%E8%A7%A6%E5%8F%91\" aria-label=\"23 如何自定义事件并触发 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>23. 如何自定义事件并触发?</h3>\n<p><strong>event.initCustomEvent</strong></p>\n<ul>\n<li>type（字符串）：触发的事件类型，例如”keydown”。</li>\n<li>bubbles（布尔值）：表示事件是否应该冒泡。</li>\n<li>cancelable（布尔值）：表示事件是否可以取消。</li>\n<li>detail（对象）：任意值，保存在 event 对象的 detail 属性中。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomEvent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nevent<span class=\"token punctuation\">.</span><span class=\"token function\">initCustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myevent\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"24-多点手势的原理\" style=\"position:relative;\"><a href=\"#24-%E5%A4%9A%E7%82%B9%E6%89%8B%E5%8A%BF%E7%9A%84%E5%8E%9F%E7%90%86\" aria-label=\"24 多点手势的原理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>24. 多点手势的原理?</h3>\n<h3 id=\"25-code-classlanguage-textaddeventlistenercode传参的第三个参数中有哪些属性，含义是？\" style=\"position:relative;\"><a href=\"#25-code-classlanguage-textaddeventlistenercode%E4%BC%A0%E5%8F%82%E7%9A%84%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%90%AB%E4%B9%89%E6%98%AF%EF%BC%9F\" aria-label=\"25 code classlanguage textaddeventlistenercode传参的第三个参数中有哪些属性，含义是？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>25. <code class=\"language-text\">addEventListener</code>传参的第三个参数中有哪些属性，含义是？</h3>\n<h4 id=\"code-classlanguage-textcapturecode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textcapturecode\" aria-label=\"code classlanguage textcapturecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">capture</code></h4>\n<p>默认为 false。如果设为 true，则表示在 capture 阶段触发事件。</p>\n<h4 id=\"code-classlanguage-textoncecode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textoncecode\" aria-label=\"code classlanguage textoncecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">once</code></h4>\n<p>默认为 false。如果为 true，表示事件只触发一次。事件处理函数会在被调用后自动移除。</p>\n<h4 id=\"code-classlanguage-textpassivecode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textpassivecode\" aria-label=\"code classlanguage textpassivecode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">passive</code></h4>\n<p>表示 listener 永远不会调用 <code class=\"language-text\">preventDefault()</code>。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。</p>\n<p>这个属性存在的含义主要是为了<strong>优化滚屏性能</strong>，也就是说，当添加了<code class=\"language-text\">passive</code>属性后，<strong><code class=\"language-text\">touchmove</code>事件不会阻塞页面的滚动</strong>（同样适用于鼠标的滚轮事件）。</p>","timeToRead":15,"wordCount":{"paragraphs":131,"sentences":135,"words":501},"fields":{"slug":"/di-shi-san-zhang-shi-jian/","relativePath":"2018/2018-03-05---di-shi-san-zhang-shi-jian/index.md"},"excerpt":"这里所说的事件是指: JavaScript 和 HTML 之间交互的事件. 也就是说, 浏览器文档在交互的过程中会以事件的方式通知绑定的监听器. 这里使用了传统软件工程的观察者模式的设计模型, 实现JavaScript…","frontmatter":{"title":"第十三章 事件","date":"05 Mar 2018","tags":["JS高程"],"cover":"","comments":true,"author":"烈风裘"}}},"pageContext":{"curr":"/di-shi-er-zhang-DOM2-he-huo-hu-DOM3/","prev":"/di-shi-san-zhang-shi-jian/","next":"/di-shi-yi-zhang-DOM-tuo-ta-zhi-zhan/"}},"staticQueryHashes":["3240721340","63159454"]}