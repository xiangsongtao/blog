{"componentChunkName":"component---src-templates-tag-page-js","path":"/tag/css/1","result":{"data":{"site":{"siteMetadata":{"title":"Attila","cover":"/background/1.jpg","author":"@烈风裘","description":"Thoughts, stories and ideas.","keywords":["烈风裘的博客","X-Blog","Attila","Gatsby","前端成长记录"],"tagCover":"/background/5.jpg","archiveCover":"/background/escape-flight.png","siteUrl":"https://xiangst0816.github.io/blog","logo":"","navigation":true,"subscribe":true}},"master":{"id":"烈风裘"},"allAuthorJson":{"totalCount":2,"edges":[{"node":{"id":"烈风裘","avatar":"/avatar/me.jpeg"}},{"node":{"id":"WALL-E","avatar":"/avatar/cleaner.jpg"}}]},"allMarkdownRemark":{"totalCount":5},"currentMarkdownRemark":{"edges":[{"node":{"excerpt":"原版《CSS Secrets》是由 LEA VEROU 编写，主要介绍网页设计中比较经典的 CSS 实现方案及编写技巧。中文版由“CSS 魔法”翻译，在阅读过程中个人感觉翻译的还是很到位的，这里点个赞。 CSS Secrets: Better Solutions to Everyday Web Design Problems 这篇文章是对《CSS 揭秘》一书的总结，以思维导图的方式将书中脉络梳理出来，在过一遍书中知识点时做到查漏补缺。另外，通过一次梳理就记住 CSS…","fields":{"slug":"/css-jie-mi/"},"frontmatter":{"title":"CSS揭秘","tags":["CSS"],"star":true,"date":"21 Jul 2018","author":"烈风裘"}}},{"node":{"excerpt":"是一个 CSS 函数，它能创建一个在多个颜色之间根据已知路径进行线性渐变的图片。没错，是类型的图片，因此渐变函数无法应用于的场景，比如：background-color。  此外，没有内在维度、尺寸或者比例，它的具体尺寸将和对应元素尺寸匹配，如果希望创建能重复渐变的特性，可以使用函数。 线性渐变是如何合成的？ 我们需要清楚的一点是，linear-gradient 是一个 css…","fields":{"slug":"/guan-yu-linear-gradient-ni-xu/"},"frontmatter":{"title":"关于linear-gradient()你需要知道的事儿","tags":["CSS"],"star":false,"date":"13 Jul 2018","author":"烈风裘"}}},{"node":{"excerpt":"前端发展很快，以前在移动端使用 Flex 布局还要想三想的文章也许已经过时了，这篇文章主要介绍使用 Flex 进行常规布局及在移动端的处理。 Flex 语法 Flex 布局意为”弹性布局”，用来为盒模型提供更多灵活性。此外，Flex 定义的容器可以对块级元素()或行内元素()生效，需要注意的是，如果父元素设置了 Flex 容器，则子元素的、和属性将失效。 Flex 布局需要注意下面几个重要的概念，结合下面这张图也许能更好的理解: flex 容器(flex container) flex…","fields":{"slug":"/Flex-bu-ju-ji-zai-yi-dong-duan-de-di/"},"frontmatter":{"title":"Flex布局及在移动端的应用","tags":["CSS"],"star":false,"date":"25 May 2017","author":"烈风裘"}}},{"node":{"excerpt":"梳理这部分是因为在使用组件模式开发 h5 应用会出现组件样式修改未生效的问题，在解决样式修改的问题前，需要理清楚 CSS 样式生效的优先级。样式根据引入和声明需要分开介绍，分为引入样式优先级和声明样式优先级。 引入样式优先级 引入样式优先级一般是在外部样式、内部样式、内联样式之间应用同一个样式的情况是使用， 优先级如下： 外部样式 | 内部样式 < 内联样式 外部样式和内部样式，最后出现的优先级最高，例如： 因此，对于一些重置的样式集，比如normalize.css/reset.css…","fields":{"slug":"/CSS-you-xian-ji-ji-suan-ji-ying-yong/"},"frontmatter":{"title":"CSS优先级计算及应用","tags":["CSS"],"star":false,"date":"24 May 2017","author":"烈风裘"}}},{"node":{"excerpt":"可畏的前端 浏览器兼容性问题是指因为不同的浏览器对同一段 CSS 代码或者 JS 代码解析不同导致页面显示效果不统一或者脚本执行错误的情况。一般情况下，我们希望用户无论使用什么浏览器来查看网页效果都应该是一样的。浏览器的兼容性问题是 Web 前端开发人员经常会碰到的和必须要解决的问题。 浏览器兼容的部分一般分为 CSS 部分和 JS 部分，JS 部分请参考这里。 相关的问题已近在前端界整理的很充分了，大致的问题可总结如下： 浏览器的初始化样式不同导致兼容性的问题 局部样式解析不同导致的 bug…","fields":{"slug":"/liu-lan-qi-jian-rong-xing-wen-ti-ji-jie/"},"frontmatter":{"title":"浏览器兼容性问题及解决方案(CSS部分)","tags":["兼容问题","CSS"],"star":false,"date":"08 Feb 2017","author":"烈风裘"}}}]}},"pageContext":{"skip":0,"limit":10,"tag":"CSS"}},"staticQueryHashes":["3240721340","63159454"]}