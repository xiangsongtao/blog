{"componentChunkName":"component---src-templates-blog-post-js","path":"/webp/","result":{"data":{"site":{"siteMetadata":{"title":"Attila","cover":"/background/1.jpg","description":"Thoughts, stories and ideas.","keywords":["烈风裘的博客","X-Blog","Attila","Gatsby","前端成长记录"],"tagCover":"/background/5.jpg","archiveCover":"/background/escape-flight.png","siteUrl":"https://xiangst0816.github.io/blog","logo":"","navigation":true,"subscribe":true}},"allAuthorJson":{"totalCount":2,"edges":[{"node":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/me.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangsongtao","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangsongtao.github.io/blog/","location":"HangZhou, China"}},{"node":{"id":"WALL-E","bio":"还有要清理的吗?","avatar":"/avatar/cleaner.jpg","cover":"","github":null,"twitter":null,"zhihu":null,"weibo":null,"facebook":null,"website":null,"location":"Earth"}}]},"master":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/me.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangsongtao","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangsongtao.github.io/blog/","location":"HangZhou, China"},"currentPost":{"html":"<p>WebP 是一种图片压缩格式，主要应用在网络中传输图片，减小带宽及存储空间。在相同的精细度的情况下，WebP 拥有更小的文件尺寸，其在 Google 的产品中广为应用。</p>\n<h3 id=\"使用场景\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\" aria-label=\"使用场景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用场景</h3>\n<ol>\n<li>桌面浏览器： 谷歌浏览器能完全展示，但是 Firefox 不行</li>\n<li>手机浏览器：完全不行，例如 IOS 的 Safari 及微信浏览器</li>\n<li>APP：Android 和 IOS 图片展示需要专门的解析库</li>\n</ol>\n<h3 id=\"app-中使用特性\" style=\"position:relative;\"><a href=\"#app-%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%89%B9%E6%80%A7\" aria-label=\"app 中使用特性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>APP 中使用特性</h3>\n<h4 id=\"解析性能\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%9E%90%E6%80%A7%E8%83%BD\" aria-label=\"解析性能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解析性能</h4>\n<p>其中解码时间，WebP 的解码时间是 PNG 格式的 4.4 ~ 5 倍，流畅度、CPU 使用时间、内存占用无明显差异</p>\n<h4 id=\"最优方案\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E4%BC%98%E6%96%B9%E6%A1%88\" aria-label=\"最优方案 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最优方案</h4>\n<ul>\n<li>图片规格</li>\n</ul>\n<p>可以考虑使用 16n*16n 的规格，例如 256*256 或者 192*192 能获得更高的 WebP 压缩效率。</p>\n<ul>\n<li>色彩数</li>\n</ul>\n<p>建议原创表情尽量控制颜色数在 256 色以内，采用无损压缩性价比最高。</p>\n<ul>\n<li>色温、渐变与杂色、直线与直线、描边</li>\n</ul>\n<p>用色少，颜色渐变合理，装饰元素少，画面简单的</p>\n<h3 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h3>\n<p>谨慎使用！！</p>\n<h3 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h3>\n<ul>\n<li><a href=\"http://isux.tencent.com/introduction-of-webp.html\" target=\"_target\" rel=\"nofollow\">WebP 探寻之路</a></li>\n</ul>","timeToRead":1,"wordCount":{"paragraphs":19,"sentences":19,"words":76},"fields":{"slug":"/webp/","relativePath":"2016/2016-10-17---webp/index.md"},"excerpt":"WebP 是一种图片压缩格式，主要应用在网络中传输图片，减小带宽及存储空间。在相同的精细度的情况下，WebP 拥有更小的文件尺寸，其在 Google…","frontmatter":{"title":"webp","date":"17 Oct 2016","tags":["WebP"],"cover":"","comments":true,"author":"烈风裘"}},"nextPost":{"html":"<p>本总结是对《高性能 JavaScript》这本书的总结也是记录笔记,加深我对 JavaScript 的认识及实践技巧。</p>\n<h2 id=\"一、脚本的加载和执行\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E3%80%81%E8%84%9A%E6%9C%AC%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%89%A7%E8%A1%8C\" aria-label=\"一、脚本的加载和执行 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一、脚本的加载和执行</h2>\n<p>一般来说，JavaScript 代码的执行会阻塞浏览器进行的其他程序，比如用户界面绘制。每次遇到<code class=\"language-text\">&lt;script&gt;</code>后，,页面都必须停下来等待代码下载并执行，然后再继续解析和渲染页面。在这期间，页面渲染和用户交互是完全被阻塞的，例如页面出现长时间的白屏。解决方案如下：</p>\n<ol>\n<li>将<code class=\"language-text\">&lt;script&gt;</code>放在<code class=\"language-text\">&lt;/body&gt;</code>之前，确保脚被执行前页面已完成渲染。</li>\n<li><code class=\"language-text\">&lt;script&gt;</code>标签越少越好，可以考虑用 gulp 任务合并。因为 HTTP 请求会带来额外的性能开销。</li>\n<li>内嵌脚本如果在<code class=\"language-text\">&lt;link&gt;</code>之后会导致页面阻塞去等待样式表的下载。这样能获得最精准的样式信息，但是会阻塞其他任务。（不建议，但 hack 除外）</li>\n<li>\n<p>使用无阻塞下载的方式</p>\n<ul>\n<li><strong>延迟脚本：</strong><br>\n在<code class=\"language-text\">&lt;script&gt;</code>标签中使用 defer 属性，该属性指明此脚本不会修改 DOM，因此可以安全的延迟执行。（async 属性也用于异步加载脚本，区别在于其加载完成后自动执行，而 defer 需要页面完成后才执行）</li>\n<li><strong>使用 XHR 对象下载 JavaScript 代码并注入到页面中</strong><br>\n主要的局限是只能在同域中请求 js 文件，也不能从 CDN 获取 js 文件。</li>\n<li><strong>动态脚本（推荐）：</strong><br>\n动态创建<code class=\"language-text\">&lt;script&gt;</code>元素并下载执行。即在 window 对象的 load 事件出发后再下载脚本。<br>\n可自己实现(如下)，也可使用类库:<a href=\"http://github.com/rgrove/lazyload/\" target=\"_target\" rel=\"nofollow\">lazyload</a>、<a href=\"http://labjs.com\" target=\"_target\" rel=\"nofollow\">LABjs</a>。</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/**\n * @title: addTags动态加载js标签\n * @params:\n * tagUrl: js资源的数组\n * eachLoadedCB: 每个资源加载完毕的回调\n * allLoadedCB: 所有资源加载完毕的回调\n * */\nfunction addTags(tagUrl, eachLoadedCB, allLoadedCB) {\n\n    if (!(tagUrl instanceof Array)) {\n        alert(&quot;first arguments must be array of urls&quot;);\n        return false;\n    }\n    var totalResource = tagUrl.length;\n    var restResource = totalResource;\n    var downLoadPercent;\n    for (var i = 0, len = tagUrl.length; len &gt; i; i++) {\n        //标签对象\n        var _TagObjs;\n        if (/.js$/.test(tagUrl[i])) {\n            _TagObjs = document.createElement(&quot;script&quot;);\n            _TagObjs.setAttribute(&#39;type&#39;, &#39;text/javascript&#39;);\n            _TagObjs.setAttribute(&#39;src&#39;, tagUrl[i]);\n            head.appendChild(_TagObjs);\n        }\n        if(_TagObjs.readyState){\n            //IE\n            _TagObjs.onreadystatechange = function () {\n                if(_TagObjs.readyState == &quot;loaded&quot; || _TagObjs.readyState == &quot;complete&quot;){\n                    _TagObjs.onreadystatechange = null;\n                    restResource--;\n                    downLoadPercent = Math.round((totalResource - restResource) / totalResource * 100);\n                    !!eachLoadedCB &amp;&amp; eachLoadedCB(totalResource, restResource, downLoadPercent);\n                    !!!restResource &amp;&amp; allLoadedCB &amp;&amp; allLoadedCB();\n                }\n            }\n        }else{\n            _TagObjs.onload = function () {\n                restResource--;\n                downLoadPercent = Math.round((totalResource - restResource) / totalResource * 100);\n                !!eachLoadedCB &amp;&amp; eachLoadedCB(totalResource, restResource, downLoadPercent);\n                !!!restResource &amp;&amp; allLoadedCB &amp;&amp; allLoadedCB();\n            };\n        }\n\n    }\n}\n\n\n/**\n * 使用\n * */\naddTags([&quot;core.js&quot;,&quot;lib.js&quot;],function (t,r,d) {\n    alert(&quot;total:&quot;+t+&quot;,rest:&quot;+r+&quot;,percent:&quot;+d);\n},function () {\n    alert(&quot;all loaded&quot;)\n})</code></pre></div>\n<h2 id=\"二、数据存储\" style=\"position:relative;\"><a href=\"#%E4%BA%8C%E3%80%81%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8\" aria-label=\"二、数据存储 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二、数据存储</h2>\n<p>JavaScript 的四种基本的数据存取位置，比较简单，这里只是简单列举：</p>\n<ul>\n<li>字面量 （最快）</li>\n<li>本地变量 （var 创建）（最快）</li>\n<li>数组元素 （最慢）</li>\n<li>对象成员（最慢）</li>\n</ul>\n<h3 id=\"作用域链\" style=\"position:relative;\"><a href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE\" aria-label=\"作用域链 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>作用域链</h3>\n<p>找了一张图：\n<img src=\"http://img.my.csdn.net/uploads/201304/04/1365082234_1223.png\" alt=\"作用域链\"></p>\n<ul>\n<li>函数执行都会创建自己的执行环境，且执行环境都有自己的作用域链，用于解析标识符。函数运行时的变量对象会放在作用域链的顶端。当执行环境被销毁，此对象也随之销毁。故，在函数执行过程中，每遇到变量，都会经历一次标识符解析过程以决定从哪儿获取存储数据。---> <strong>藏的越深，找的越慢！</strong></li>\n<li>作用域链的末尾是全局变量对象，故<strong>搜索该变量的过程必须遍历整个作用域链！</strong>一般是讲此全局变量缓存的到局部变量中。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function init(){\n\tvar a = document;\n\tvar b = a.body;\n\tb.getElementByTagName(&quot;a&quot;);\n}</code></pre></div>\n<ul>\n<li>改变作用域链的方式有： - with(不建议使用，可使用局部变量替换) - try catch (可用)<br>\ntry 内函数的作用域对象放在首位，catch 内函数的作用域对象放在第二位。catch 执行完毕，作用域链就返回到之前的状态。<strong>建议将 catch 内的处理逻辑由专门的函数处理，由于只有一条执行语句，且没有局部变量的访问，作用域链的临时改变不会影响代码性能。</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">try{\n\tmethod();\n} catch(e){\n\thandleErr(e);\n}</code></pre></div>\n<h3 id=\"闭包、作用域和内存\" style=\"position:relative;\"><a href=\"#%E9%97%AD%E5%8C%85%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98\" aria-label=\"闭包、作用域和内存 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>闭包、作用域和内存</h3>\n<ul>\n<li>闭包会造成更多的内存开销</li>\n<li>闭包会放在作用域链的顶端，第二层是活动对象的作用域，也就是说，闭包的存在会频繁的出现跨作用域访问标识符的情况，每次访问都会带来性能损失，解救方案：将常用的跨作用域的变量存储到局部变量中，然后直接访问局部变量。</li>\n</ul>\n<h3 id=\"原型链\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE\" aria-label=\"原型链 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原型链</h3>\n<ul>\n<li>Javascript 中的对象是基于原型的。</li>\n<li>所有的对象都是 Object 的实例。</li>\n<li>实例继承了原型链中的所有成员，故原型决定了实例的类型！</li>\n</ul>\n<p>浏览器中的原型链结构:\n<img src=\"http://images.cnitblog.com/blog/543993/201401/211448230160.jpg\" alt=\"浏览器中的原型链结构\"></p>\n<ul>\n<li>嵌套的对象成员会显著的影响性能，访问的速度也越慢,例如：<br>\nwindow.location.href.toString() > window.location.href > location.href</li>\n<li>缓存对象的成员，如果多次访问的话。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"vara = location;\"><pre class=\"language-vara = location;\"><code class=\"language-vara = location;\">\ta.href;\n\t....</code></pre></div>\n<ul>\n<li>属性和方法越深，访问的速度也越慢</li>\n</ul>\n<h2 id=\"三、dom-编程\" style=\"position:relative;\"><a href=\"#%E4%B8%89%E3%80%81dom-%E7%BC%96%E7%A8%8B\" aria-label=\"三、dom 编程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>三、DOM 编程</h2>\n<ul>\n<li>减少 DOM 的访问次数，把运算留在 JS 端处理。</li>\n<li>遍历数组的速度快于遍历集合是速度，故将 HTML 集合转化为数组在进行处理会更高效。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function toArray(coll){\n\tfor(var i = 0,a = [],len = coll.length;i&lt;len;i++){\n\t\ta[i] = coll[i];\n\t}\n\treturn a;\n}\n\nvar coll = document.getElementsByTagName(&quot;div&quot;);\nvar ar = toArray(coll);</code></pre></div>\n<ul>\n<li>建议使用 querySlectorAll()方法</li>\n</ul>\n<h3 id=\"重绘和重排\" style=\"position:relative;\"><a href=\"#%E9%87%8D%E7%BB%98%E5%92%8C%E9%87%8D%E6%8E%92\" aria-label=\"重绘和重排 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重绘和重排</h3>\n<ul>\n<li>重排：reflow，重新计算元素几何属性，重新构造渲染树，代价很高；</li>\n<li>重绘： repaint，代价相对较小。</li>\n</ul>\n<p>故：</p>\n<ul>\n<li>批量修改 DOM</li>\n<li>批量改变样式（ele.style.cssText = \"\"）</li>\n<li>使元素脱离文档流，避免大部分文档重排： - 动画元素绝对定位，脱离文档流</li>\n</ul>\n<h3 id=\"事件委托\" style=\"position:relative;\"><a href=\"#%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98\" aria-label=\"事件委托 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>事件委托</h3>\n<p>大量元素绑定相同处理事件的时候，将事件绑定到 document 上，通过冒泡事件捕获并处理</p>\n<h2 id=\"四、算法和流程控制\" style=\"position:relative;\"><a href=\"#%E5%9B%9B%E3%80%81%E7%AE%97%E6%B3%95%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\" aria-label=\"四、算法和流程控制 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>四、算法和流程控制</h2>\n<ul>\n<li>for, while, do- while，性能相当，灵活使用</li>\n<li>避免使用 for-in，除非遍历对象的数量不确定。</li>\n<li>switch 和 if-else 灵活使用</li>\n<li>出现栈溢出，可能是因为使用了递归，将递归改为迭代可以避免。因为运行一个循环比反复调用一个函数的开销要少的多。</li>\n</ul>\n<h2 id=\"五、字符串和正则表达式\" style=\"position:relative;\"><a href=\"#%E4%BA%94%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\" aria-label=\"五、字符串和正则表达式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>五、字符串和正则表达式</h2>\n<ul>\n<li>使用+和+=操作字符串，避免不必要的中间字符串</li>\n<li>正则，待续</li>\n</ul>\n<h2 id=\"六、快速响应用户界面\" style=\"position:relative;\"><a href=\"#%E5%85%AD%E3%80%81%E5%BF%AB%E9%80%9F%E5%93%8D%E5%BA%94%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2\" aria-label=\"六、快速响应用户界面 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>六、快速响应用户界面</h2>\n<ul>\n<li>js 任务不可超过 100ms</li>\n<li>使用 settimeout 将长时间的 js 放入队列中异步执行，不阻碍 ui 进程。</li>\n<li>可以使用 web works</li>\n</ul>\n<h2 id=\"七、ajax\" style=\"position:relative;\"><a href=\"#%E4%B8%83%E3%80%81ajax\" aria-label=\"七、ajax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>七、AJAX</h2>\n<ul>\n<li>减少请求次数</li>\n</ul>\n<h2 id=\"八、编程实践\" style=\"position:relative;\"><a href=\"#%E5%85%AB%E3%80%81%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5\" aria-label=\"八、编程实践 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>八、编程实践</h2>\n<ul>\n<li>避免双重求值（使用 eval()和 Function()运行字符串代码）</li>\n<li>Object 和 Array 使用直接量，而不是 new</li>\n<li>环境判断的函数应该使用延迟加载技术（Lazy Loading）或者条件预加载技术（Conditional Advance Loading），即，环境确定后，用该环境下的函数替换主函数</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//延迟加载技术（Lazy Loading）\n//第一次执行判断环境，之后修改addHandler函数并执行\nfunctin addHandler(x){\n\tif(isThisEnvironment){\n\t\taddHandler = function(x){}\n\t}else{\n\t\taddHandler = function(x){}\n\t}\n\taddHandler(x);\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//条件预加载技术（Conditional Advance Loading）\n//脚本加载期间检测，并修改addHandler函数；\nvar addHandler = isThisEnvironment?function(x){}:function(x){};</code></pre></div>\n<ul>\n<li>使用 js 原生提供的方法（Math）</li>\n<li>使用位操作</li>\n</ul>\n<h2 id=\"九、构建高性能-js-应用\" style=\"position:relative;\"><a href=\"#%E4%B9%9D%E3%80%81%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD-js-%E5%BA%94%E7%94%A8\" aria-label=\"九、构建高性能 js 应用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>九、构建高性能 js 应用</h2>\n<ul>\n<li>合并多个 JavaScript 文件，减少 HTTP 请求数</li>\n<li><strong>非必须的脚本延迟加载</strong></li>\n<li>JavaScript 压缩，方法：ugify、js 重构（GCC）</li>\n<li>启用 gzip</li>\n<li>manifest 缓存技术，包含 manifest 的 html 也会被缓存</li>\n<li>CDN</li>\n<li>文件名增加 MD5 值防止缓存更新问题</li>\n</ul>\n<h2 id=\"10、工具\" style=\"position:relative;\"><a href=\"#10%E3%80%81%E5%B7%A5%E5%85%B7\" aria-label=\"10、工具 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10、工具</h2>\n<ul>\n<li>分类：性能分析+网络分析</li>\n<li>浏览器的开发工具</li>\n<li>Fidder/postman/Charles Proxy</li>\n</ul>","timeToRead":8,"wordCount":{"paragraphs":78,"sentences":78,"words":322},"fields":{"slug":"/gao-xing-neng-nai-JavaScript-shi-jian/","relativePath":"2016/2016-05-21---gao-xing-neng-nai-JavaScript-shi-jian/index.md"},"excerpt":"本总结是对《高性能 JavaScript》这本书的总结也是记录笔记,加深我对 JavaScript 的认识及实践技巧。 一、脚本的加载和执行 一般来说，JavaScript…","frontmatter":{"title":"高性能JavaScript实践总结","date":"21 May 2016","tags":["JavaScript","读书笔记"],"cover":"","comments":true,"author":"烈风裘"}},"prevPost":{"html":"<h2 id=\"restful-架构\" style=\"position:relative;\"><a href=\"#restful-%E6%9E%B6%E6%9E%84\" aria-label=\"restful 架构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful 架构</h2>\n<p>REST 是 Representational State Transfer 的缩写，表示“表现层状态转移”。这个其实是在讲一个过程。</p>\n<p>很久之前，用户访问服务器的时候，服务器是主角。他根据用户的请求决定发送设么东西给客户端，而客户端只有接收的“命”；</p>\n<p>现在 REST 来了，主角现在是用户，用户通过 HTTP 协议中的多种请求状态（GET、POST、PUT、DELETE 等），要求服务器按照 URL 中的参数将资源返回。这时服务器就像一个静态的资源服务器一样，每一个 URI 代表一种资源。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">RESRful：\n资源 = URI + Method\n\nMethod：\nGET用来获取资源\nPOST用来新建资源（也可以用于更新资源）\nPUT用来更新资源\nDELETE用来删除资源</code></pre></div>\n<p>因此，操作资源的动作只能由 GET、POST、PUT、DELETE 等进行，URI 代表资源的名称，故设计 URI 时尽量使用名词！</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_target\" rel=\"nofollow\">RESTful API 设计指南</a></li>\n</ul>","timeToRead":1,"wordCount":{"paragraphs":7,"sentences":7,"words":52},"fields":{"slug":"/RESTful-she-ji/","relativePath":"2016/2016-10-17---RESTful-she-ji/index.md"},"excerpt":"RESTful 架构 REST 是 Representational State Transfer…","frontmatter":{"title":"RESTful设计","date":"17 Oct 2016","tags":["RESTful"],"cover":"","comments":true,"author":"烈风裘"}}},"pageContext":{"curr":"/webp/","prev":"/RESTful-she-ji/","next":"/gao-xing-neng-nai-JavaScript-shi-jian/"}},"staticQueryHashes":["3240721340","63159454"]}