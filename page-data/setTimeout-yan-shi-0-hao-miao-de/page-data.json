{"componentChunkName":"component---src-templates-blog-post-js","path":"/setTimeout-yan-shi-0-hao-miao-de/","result":{"data":{"site":{"siteMetadata":{"title":"Attila","cover":"/background/1.jpg","description":"Thoughts, stories and ideas.","keywords":["烈风裘的博客","X-Blog","Attila","Gatsby","前端成长记录"],"tagCover":"/background/5.jpg","archiveCover":"/background/escape-flight.png","siteUrl":"https://xiangst0816.github.io/blog","logo":"","navigation":true,"subscribe":true}},"allAuthorJson":{"totalCount":2,"edges":[{"node":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/avatar.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"}},{"node":{"id":"WALL-E","bio":"还有要清理的吗?","avatar":"/avatar/cleaner.jpg","cover":"","github":null,"twitter":null,"zhihu":null,"weibo":null,"facebook":null,"website":null,"location":"Earth"}}]},"master":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/avatar.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"},"currentPost":{"html":"<p>相信这样的代码<code class=\"language-text\">setTimeout(function () {},0)</code>我们都是遇到过的, 但是思考为什么这么用而不用其他的办法的人估计就很少了，今天遇到，在此记录。</p>\n<h2 id=\"先解释下-javascript-单线程模型\" style=\"position:relative;\"><a href=\"#%E5%85%88%E8%A7%A3%E9%87%8A%E4%B8%8B-javascript-%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B\" aria-label=\"先解释下 javascript 单线程模型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先解释下 JavaScript 单线程模型</h2>\n<p><a href=\"http://www.cnblogs.com/silin6/p/4333999.html\" target=\"_target\" rel=\"nofollow\">原文由此进入</a></p>\n<p>首先我们来看浏览器下的 JavaScript：</p>\n<p>浏览器的内核是多线程的，它们在内核制控下相互配合以保持同步，一个浏览器至少实现三个常驻线程：<strong>JavaScript 引擎线程</strong>，<strong>GUI 渲染线程</strong>，<strong>浏览器事件触发线程</strong>。</p>\n<ul>\n<li>JavaScript 引擎是基于事件驱动单线程执行的，JS 引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个 JS 线程在运行 JS 程序。</li>\n<li>GUI 渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意 GUI 渲染线程与 JS 引擎是互斥的，当 JS 引擎执行时 GUI 线程会被挂起，GUI 更新会被保存在一个队列中等到 JS 引擎空闲时立即被执行。<a href=\"\">如何触发重绘操作</a></li>\n<li>事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理。这些事件可来自 JavaScript 引擎当前执行的代码块如<code class=\"language-text\">setTimeOut</code>、也可来自浏览器内核的其他线程如<code class=\"language-text\">鼠标点击事件</code>、<code class=\"language-text\">AJAX异步请求</code>等，但由于 JS 的单线程关系所有这些事件都得排队等待 JS 引擎处理。（当线程中没有执行任何同步代码的前提下才会执行异步代码）。<a href=\"\">事件</a></li>\n</ul>\n<p>js 的单线程在这一段面试代码中尤为明显（理解即可，请不要尝试…浏览器会假死的）：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var isEnd = true;\nwindow.setTimeout(function () {\n    isEnd = false; //1s后，改变isEnd的值\n}, 1000);\n//这个while永远的占用了js线程，所以setTimeout里面的函数永远不会执行\nwhile (isEnd);\n//alert也永远不会弹出\nalert(&#39;end&#39;);</code></pre></div>\n<p>在我工作中对 js 的认识，个人认为 js 的任务单位是<strong>函数</strong>。即，一个函数表示着一个任务，这个函数没有执行结束，则在浏览器中当前的任务即没有结束。</p>\n<p>上面的代码中，当前任务因为 while 的执行而造成永远无法执行，所以后面的 setTimeout 也永远不会被执行。它在浏览器的任务队列中如图所示：</p>\n<p><img src=\"http://xiangsongtao.com/uploads/1474859133000.png\"></p>\n<blockquote>\n<p>另外值得一提的是，setTimeout 会将内部 Fn 所需的执行环境保存挂载任务的末尾，因此如果 setTimeout 过多，在 node 端会造成内存泄露，因此在 node 端慎用。</p>\n</blockquote>\n<h2 id=\"实现-javascript-的异步；\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0-javascript-%E7%9A%84%E5%BC%82%E6%AD%A5%EF%BC%9B\" aria-label=\"实现 javascript 的异步； permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现 javascript 的异步；</h2>\n<blockquote>\n<p>javascript 异步表示 async，指：代码执行不按顺序，‘跳过’执行，待其他某些代码执行完后，再来执行，称为“异步”。\njavascript 同步表示 sync，指：代码依次执行。</p>\n</blockquote>\n<p>当然，这个‘异步’是模拟的形式出现的。正常情况下 javascript 都是按照顺序执行的。但是我们可能让该语句后面的语句执行完再执行本身，这时就可以用到 setTimeout 延时 0ms 来实现了，将 setTimeout 内部函数放到同步函数的外面执行（<strong>setTimeout 内部函数放到了当前执行函数的外面</strong>）。如：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">alert(1);\nsetTimeout(&quot;alert(2)&quot;, 0);\nalert(3);</code></pre></div>\n<p>虽然延时了 0ms,但是执行顺序为：1，3，2\n这样就保证 setTimeout 里面的语句在某一代码段中最后执行。</p>\n<p>因此：<strong>我们应该认识到，利用 setTimeout(fn,0)的特性，可以帮助我们在某些极端场景下，修正浏览器的下一个任务。</strong></p>\n<p>（完）</p>","timeToRead":3,"wordCount":{"paragraphs":18,"sentences":19,"words":161},"fields":{"slug":"/setTimeout-yan-shi-0-hao-miao-de/","relativePath":"2016/2016-10-20---setTimeout-yan-shi-0-hao-miao-de/index.md"},"excerpt":"相信这样的代码我们都是遇到过的, 但是思考为什么这么用而不用其他的办法的人估计就很少了，今天遇到，在此记录。 先解释下 JavaScript 单线程模型 原文由此进入 首先我们来看浏览器下的 JavaScript…","frontmatter":{"title":"setTimeout延时0毫秒的作用","date":"20 Oct 2016","tags":["JavaScript"],"cover":"","comments":true,"author":"烈风裘"}},"nextPost":{"html":"<p>为了加快网页的访问速度，对请求资源进行缓存是一个常用的策略。当客户端发送资源请求后，如果资源未过期，则服务器返回 304 代表资源未修改使用浏览器本地缓存，但是这个过程还是会发生 TCP 连接，如果不发送请求就能知道本地的缓存副本就是最新的按就好了。</p>\n<p>其中的一个解决方案就是使用 HTML5 的最新特性离线存储(manifest)来解决。通过离线存储，我们可以通过把需要离线存储在本地的文件列在一个 manifest 配置文件中，这样即使在离线的情况下，用户也可以正常使用 App。同时，由之前返回的 304(not modified)全部变成 200(from cache)，也即是说不用再请求服务器资源了。</p>\n<blockquote>\n<p>PS：应该是在单页面 SPA 应用中多使用此技术，除了 IE9 及其以下版本不兼容，其余浏览器都兼容。</p>\n</blockquote>\n<h3 id=\"怎么使用\" style=\"position:relative;\"><a href=\"#%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8\" aria-label=\"怎么使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>怎么使用</h3>\n<p>在 html 中加入 manifest 的属性就可以了。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">HTML</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">manifest</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>cache.manifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>之后编写<code class=\"language-text\">cache.manifest</code>文件(此文件一般是通过自动化工具来做生成，手动维护很痛苦)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CACHE MANIFEST\n\nCACHE:\nhttp://cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css\nhttp://cdn.bootcss.com/font-awesome/4.6.3/fonts/fontawesome-webfont.woff2?v=4.6.3\nhttp://xiangsongtao.com/static/css/app.40ca310ea17e37e2c7d1be290f097782.css\nhttp://xiangsongtao.com/static/js/0.cc35128bd8494c03daa0.js\nhttp://xiangsongtao.com/static/js/1.9f1833ed33a94fe44f61.js\nhttp://xiangsongtao.com/static/js/2.6fd53cc0491419739c75.js\nhttp://xiangsongtao.com/static/js/3.7d2782ebd4a9ccfc73c3.js\nhttp://xiangsongtao.com/static/js/4.3ffed0ad00e3cbf19311.js\nhttp://xiangsongtao.com/static/js/5.0864b0b318aed8c5e5c3.js\nhttp://xiangsongtao.com/static/js/6.8cf1f468ef4e49b1fb0d.js\nhttp://xiangsongtao.com/static/js/7.da83992afd496d4889e3.js\nhttp://xiangsongtao.com/static/js/8.a75be465a534de6bc590.js\nhttp://xiangsongtao.com/static/js/app.88635de0da664917c9bc.js\nhttp://xiangsongtao.com/static/js/manifest.c3d7bc712610ce511e9b.js\nhttp://xiangsongtao.com/static/js/vendor.dd1992f099a201029616.js\n\nNETWORK:\n*\n\nSETTINGS:\nprefer-online\n\n# hash: f98a3b3dac77c6644dc0795a6fb7e44ca03f41b33ff6d738d3da57b783abf5f1\n\nFALLBACK:\n/ /offline.html</code></pre></div>\n<p>SETTINGS 可以设置成两种模式，默认是 fast。但是在我的测试中没感觉到这两种模式有什么区别，这个就暂时不说了。</p>\n<p>这些就是 manifest 缓存最基本的东西，还有一个很大的问题就是火狐的警告。当使用 manifest 时，火狐下会出现警告。</p>\n<p>生成上述 manifest 文件的 gulp 配置如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&#39;use strict&#39;;\nvar  gulp  = require(&#39;gulp&#39;);\nvar  gulpLoadPlugins  = require(&#39;gulp-load-plugins&#39;);\nvar $ = gulpLoadPlugins();\n\ngulp.task(&#39;manifest&#39;, function(){\n  gulp.src([&#39;dist/static/**/*.{js,css}&#39;], { base: &#39;./dist&#39; })\n    .pipe($.manifest({\n      hash: true,\n      preferOnline: true,\n      prefix:&#39;http://xiangsongtao.com/&#39;,\n      network: [&#39;*&#39;],\n      cache:[\n        &#39;http://cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css&#39;,\n        &#39;http://cdn.bootcss.com/font-awesome/4.6.3/fonts/fontawesome-webfont.woff2?v=4.6.3&#39;,\n      ],\n      filename: &#39;app.manifest&#39;,\n      exclude: [&#39;app.manifest&#39;]\n    }))\n    .pipe(gulp.dest(&#39;dist&#39;));\n});</code></pre></div>\n<h3 id=\"manifest-解析过程\" style=\"position:relative;\"><a href=\"#manifest-%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B\" aria-label=\"manifest 解析过程 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>manifest 解析过程</h3>\n<p>在线情况第一次访问，则查找 html 中的 manifest 文件，如果有则下载里面需要缓存的资源。第二次访问的时候，浏览器使用本地缓存副本渲染网页，之后判断 manifest 中的文件是否更新，如果未更新则不操作；如果已更新，则下载最新副本缓存（也就是说，更新 manifest 后并不会立即生效，需要再刷新下）,这个问题我们可以用代码进行手动缓存的刷新解决，调用<code class=\"language-text\">window.applicationCache.update()</code>进行缓存刷新，<code class=\"language-text\">window.applicationCache.swapCache()</code>进行重新请求更新的资源进行渲染。</p>\n<h3 id=\"manifest-过程对应的事件\" style=\"position:relative;\"><a href=\"#manifest-%E8%BF%87%E7%A8%8B%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BA%8B%E4%BB%B6\" aria-label=\"manifest 过程对应的事件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>manifest 过程对应的事件</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> window.applicationCache.onnoupdate = function(){\n            console.debug(&#39;onnoupdate!!!!&#39;)\n}</code></pre></div>\n<ol>\n<li>oncached:当离线资源存储完成之后触发这个事件，这个是文档的说法，我在 Chrome 上面测试的时候并没有触发这个事件（onobsolete 也是）。</li>\n<li>onchecking:当浏览器对离线存储资源进行更新检查的时候会触发这个事件</li>\n<li>ondownloading:当浏览器开始下载离线资源的时候会触发这个事件</li>\n<li>onprogress:当浏览器在下载每一个资源的时候会触发这个事件，每下载一个资源就会触发一次。</li>\n<li>onupdateready:当浏览器对离线资源更新完成之后会触发这个事件</li>\n<li>on 中 noupdate:当浏览器检查更新之后发现没有资源更新的时候触发这个事件</li>\n<li>onerror: 当 manifest 中缓存的资源下载错误是触发</li>\n</ol>\n<h3 id=\"manifest-使用场景\" style=\"position:relative;\"><a href=\"#manifest-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\" aria-label=\"manifest 使用场景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>manifest 使用场景</h3>\n<p>manifest 的名字叫 Application Cache 就已经很好的定性了，它是用来构造离线应用程序的。比方说你写了个秒表，它离线也能用，这是 manifest 的应用场景。它会讲当前访问的 HTML 也缓存起来，故实时的 web 还是别用了。</p>\n<p>如果要缓存资源，设置<code class=\"language-text\">Cache Control</code>和<code class=\"language-text\">Expires</code>来做吧，这个见我的另外一篇文章。</p>\n<h3 id=\"参考资源\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%BA%90\" aria-label=\"参考资源 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考资源</h3>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/gulp-manifest\" target=\"_target\" rel=\"nofollow\">Gulp-manifest</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000000732617\" target=\"_target\" rel=\"nofollow\">原文参考 1</a></li>\n<li><a href=\"http://bin-playground.top\" target=\"_target\" rel=\"nofollow\">原文参考 2</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache\" target=\"_target\" rel=\"nofollow\">Using<em>the</em>application_cache</a></li>\n<li><a href=\"http://diveintohtml5.info/offline.html\" target=\"_target\" rel=\"nofollow\">LET’S TAKE THIS OFFLINE</a></li>\n</ul>","timeToRead":5,"wordCount":{"paragraphs":28,"sentences":28,"words":152},"fields":{"slug":"/Manifest-de-di-shi-yong/","relativePath":"2016/2016-10-20---Manifest-de-di-shi-yong/index.md"},"excerpt":"为了加快网页的访问速度，对请求资源进行缓存是一个常用的策略。当客户端发送资源请求后，如果资源未过期，则服务器返回 304 代表资源未修改使用浏览器本地缓存，但是这个过程还是会发生 TCP…","frontmatter":{"title":"Manifest的使用","date":"20 Oct 2016","tags":["缓存"],"cover":"","comments":true,"author":"烈风裘"}},"prevPost":{"html":"<p>无意在网上看到的，特此记录。<a href=\"http://www.jb51.net/article/77140.htm\" target=\"_target\" rel=\"nofollow\">原文在此</a></p>\n<h4 id=\"1、使用-typeof-bar--object-判断-bar-是不是一个对象有神马潜在的弊端？如何避免这种弊端？\" style=\"position:relative;\"><a href=\"#1%E3%80%81%E4%BD%BF%E7%94%A8-typeof-bar--object-%E5%88%A4%E6%96%AD-bar-%E6%98%AF%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%9C%89%E7%A5%9E%E9%A9%AC%E6%BD%9C%E5%9C%A8%E7%9A%84%E5%BC%8A%E7%AB%AF%EF%BC%9F%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E8%BF%99%E7%A7%8D%E5%BC%8A%E7%AB%AF%EF%BC%9F\" aria-label=\"1、使用 typeof bar  object 判断 bar 是不是一个对象有神马潜在的弊端？如何避免这种弊端？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1、使用 typeof bar === “object” 判断 bar 是不是一个对象有神马潜在的弊端？如何避免这种弊端？</h4>\n<p>使用 typeof 的弊端是显而易见的(这种弊端同使用 instanceof)：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let obj = {};\nlet arr = [];\n\nconsole.log(typeof obj === &#39;object&#39;); //true\nconsole.log(typeof arr === &#39;object&#39;); //true\nconsole.log(typeof null === &#39;object&#39;); //true</code></pre></div>\n<p>从上面的输出结果可知，typeof bar === “object” 并不能准确判断 bar 就是一个 Object。可以通过 Object.prototype.toString.call(bar) === ”[object Object]” 来避免这种弊端：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let obj = {};\nlet arr = [];\n\nconsole.log(Object.prototype.toString.call(obj)); //[object Object]\nconsole.log(Object.prototype.toString.call(arr)); //[object Array]\nconsole.log(Object.prototype.toString.call(null)); //[object Null]</code></pre></div>\n<h4 id=\"2、变量作用域相关，下面的代码会在-console-输出神马？为什么？\" style=\"position:relative;\"><a href=\"#2%E3%80%81%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9B%B8%E5%85%B3%EF%BC%8C%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BC%9A%E5%9C%A8-console-%E8%BE%93%E5%87%BA%E7%A5%9E%E9%A9%AC%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F\" aria-label=\"2、变量作用域相关，下面的代码会在 console 输出神马？为什么？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2、变量作用域相关，下面的代码会在 console 输出神马？为什么？</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function(){\n var a = b = 3;\n})();\n\nconsole.log(&quot;a defined? &quot; + (typeof a !== &#39;undefined&#39;));\nconsole.log(&quot;b defined? &quot; + (typeof b !== &#39;undefined&#39;));</code></pre></div>\n<p>这跟变量作用域有关，输出换成下面的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(b); //3\nconsole.log(typeof a); //undefined</code></pre></div>\n<p>拆解一下自执行函数中的变量赋值：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">b = 3;\nvar a = b;</code></pre></div>\n<p>所以 b 成了全局变量，而 a 是自执行函数的一个局部变量。</p>\n<h4 id=\"3、this-相关，下面的代码会在-console-输出神马？为什么？\" style=\"position:relative;\"><a href=\"#3%E3%80%81this-%E7%9B%B8%E5%85%B3%EF%BC%8C%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BC%9A%E5%9C%A8-console-%E8%BE%93%E5%87%BA%E7%A5%9E%E9%A9%AC%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F\" aria-label=\"3、this 相关，下面的代码会在 console 输出神马？为什么？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3、this 相关，下面的代码会在 console 输出神马？为什么？</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var myObject = {\n foo: &quot;bar&quot;,\n func: function() {\n var self = this;\n console.log(&quot;outer func: this.foo = &quot; + this.foo);\n console.log(&quot;outer func: self.foo = &quot; + self.foo);\n (function() {\n console.log(&quot;inner func: this.foo = &quot; + this.foo);\n console.log(&quot;inner func: self.foo = &quot; + self.foo);\n }());\n }\n};\nmyObject.func();</code></pre></div>\n<p>第一个和第二个的输出不难判断，在 ES6 之前，JavaScript 只有函数作用域，所以 func 中的 IIFE 有自己的独立作用域，并且它能访问到外部作用域中的 self，所以第三个输出会报错，因为 this 在可访问到的作用域内是 undefined，第四个输出是 bar。如果你知道闭包，也很容易解决的：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function(test) {\n console.log(&quot;inner func: this.foo = &quot; + test.foo); //&#39;bar&#39;\n console.log(&quot;inner func: self.foo = &quot; + self.foo);\n}(self));</code></pre></div>\n<h4 id=\"4、为什么要用立即执行函数表达式（immediately-invoked-function-expression）\" style=\"position:relative;\"><a href=\"#4%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88immediately-invoked-function-expression%EF%BC%89\" aria-label=\"4、为什么要用立即执行函数表达式（immediately invoked function expression） permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4、为什么要用立即执行函数表达式（Immediately-Invoked Function Expression）</h4>\n<p>IIFE 有两个比较经典的使用场景，一是类似于在循环中定时输出数据项，二是类似于 JQuery/Node 的插件和模块开发。</p>\n<p><strong>主要是为了隔离上下文环境！</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for(var i = 0; i &lt; 5; i++) {\n setTimeout(function() {\n console.log(i);\n }, 1000);\n}</code></pre></div>\n<p>上面的输出并不是你以为的 0，1，2，3，4，而输出的全部是 5，这时 IIFE 就能有用了：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for(var i = 0; i &lt; 5; i++) {\n (function(i) {\n setTimeout(function() {\n console.log(i);\n }, 1000);\n })(i)\n}</code></pre></div>\n<p>而在 JQuery/Node 的插件和模块开发中，为避免变量污染，也是一个大大的 IIFE：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function($) {\n //代码\n })(jQuery);</code></pre></div>\n<h4 id=\"5、在严格模式use-strict下进行-javascript-开发有神马好处？\" style=\"position:relative;\"><a href=\"#5%E3%80%81%E5%9C%A8%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8Fuse-strict%E4%B8%8B%E8%BF%9B%E8%A1%8C-javascript-%E5%BC%80%E5%8F%91%E6%9C%89%E7%A5%9E%E9%A9%AC%E5%A5%BD%E5%A4%84%EF%BC%9F\" aria-label=\"5、在严格模式use strict下进行 javascript 开发有神马好处？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5、在严格模式(‘use strict’)下进行 JavaScript 开发有神马好处？</h4>\n<p>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;</p>\n<p>消除代码运行的一些不安全之处，保证代码运行的安全；</p>\n<p>提高编译器效率，增加运行速度；</p>\n<p>为未来新版本的 Javascript 做好铺垫。</p>\n<h4 id=\"6、下面两个函数的返回值是一样的吗？为什么？\" style=\"position:relative;\"><a href=\"#6%E3%80%81%E4%B8%8B%E9%9D%A2%E4%B8%A4%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84%E5%90%97%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F\" aria-label=\"6、下面两个函数的返回值是一样的吗？为什么？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6、下面两个函数的返回值是一样的吗？为什么？</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo1()\n{\n return {\n bar: &quot;hello&quot;\n };\n}\n\nfunction foo2()\n{\n return\n {\n bar: &quot;hello&quot;\n };\n}</code></pre></div>\n<p>在编程语言中，基本都是使用分号（;）将语句分隔开，这可以增加代码的可读性和整洁性。而在 JS 中，如若语句各占独立一行，通常可以省略语句间的分号（;），JS 解析器会根据能否正常编译来决定是否自动填充分号：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var test = 1 +\n2\nconsole.log(test); //3</code></pre></div>\n<p>在上述情况下，为了正确解析代码，就不会自动填充分号了，但是对于<code class=\"language-text\">return</code> 、<code class=\"language-text\">break</code>、<code class=\"language-text\">continue</code>等语句，如果后面紧跟换行，解析器一定会自动在后面填充分号(;)，所以上面的第二个函数就变成了这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function foo2()\n{\n return;\n {\n bar: &quot;hello&quot;\n };\n}</code></pre></div>\n<p>所以第二个函数是返回 undefined。</p>\n<h4 id=\"7、神马是-nan，它的类型是神马？怎么测试一个值是否等于-nan\" style=\"position:relative;\"><a href=\"#7%E3%80%81%E7%A5%9E%E9%A9%AC%E6%98%AF-nan%EF%BC%8C%E5%AE%83%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%98%AF%E7%A5%9E%E9%A9%AC%EF%BC%9F%E6%80%8E%E4%B9%88%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%AA%E5%80%BC%E6%98%AF%E5%90%A6%E7%AD%89%E4%BA%8E-nan\" aria-label=\"7、神马是 nan，它的类型是神马？怎么测试一个值是否等于 nan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7、神马是 NaN，它的类型是神马？怎么测试一个值是否等于 NaN?</h4>\n<p>NaN 是 Not a Number 的缩写，JavaScript 的一种特殊数值，其类型是<code class=\"language-text\">Number</code>，可以通过 <code class=\"language-text\">isNaN(param)</code>来判断一个值是否是 NaN：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(isNaN(NaN)); //true\nconsole.log(isNaN(23)); //false\nconsole.log(isNaN(&#39;ds&#39;)); //true\nconsole.log(isNaN(&#39;32131sdasd&#39;)); //true\nconsole.log(NaN === NaN); //false\nconsole.log(NaN === undefined); //false\nconsole.log(undefined === undefined); //false\nconsole.log(typeof NaN); //number\nconsole.log(Object.prototype.toString.call(NaN)); //[object Number]\n// NaN是Number类型下的</code></pre></div>\n<p>ES6 中，isNaN() 成为了 Number 的静态方法：Number.isNaN().</p>\n<h4 id=\"8、关于小数的精确计算\" style=\"position:relative;\"><a href=\"#8%E3%80%81%E5%85%B3%E4%BA%8E%E5%B0%8F%E6%95%B0%E7%9A%84%E7%B2%BE%E7%A1%AE%E8%AE%A1%E7%AE%97\" aria-label=\"8、关于小数的精确计算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8、关于小数的精确计算</h4>\n<p>解释一下下面代码的输出</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(0.1 + 0.2); //0.30000000000000004\nconsole.log(0.1 + 0.2 == 0.3); //false</code></pre></div>\n<p>JavaScript 中的 number 类型就是浮点型，JavaScript 中的浮点数采用 IEEE-754 格式的规定，这是一种二进制表示法，可以精确地表示分数，比如 1/2，1/8，1/1024，每个浮点数占 64 位。但是，二进制浮点数表示法并不能精确的表示类似 0.1 这样 的简单的数字，会有舍入误差。</p>\n<p>由于采用二进制，JavaScript 也不能有限表示 1/10、1/2 等这样的分数。在二进制中，1/10(0.1)被表示为 0.00110011001100110011…… 注意 0011 是无限重复的，这是舍入误差造成的，所以对于 0.1 + 0.2 这样的运算，操作数会先被转成二进制，然后再计算：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0.1 =&gt; 0.0001 1001 1001 1001…（无限循环）\n0.2 =&gt; 0.0011 0011 0011 0011…（无限循环）</code></pre></div>\n<p>双精度浮点数的小数部分最多支持 52 位，所以两者相加之后得到这么一串 0.0100110011001100110011001100110011001100…因浮点数小数位的限制而截断的二进制数字，这时候，再把它转换为十进制，就成了 0.30000000000000004。</p>\n<p>对于保证浮点数计算的正确性，有两种常见方式。</p>\n<p><strong>一是先升幂再降幂(转化为整数再计算)：</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function add(num1, num2){\n let r1, r2, m;\n r1 = (&#39;&#39;+num1).split(&#39;.&#39;)[1].length;\n r2 = (&#39;&#39;+num2).split(&#39;.&#39;)[1].length;//计算小数位数\n\n m = Math.pow(10,Math.max(r1,r2));\n return (num1 * m + num2 * m) / m;\n}\nconsole.log(add(0.1,0.2)); //0.3\nconsole.log(add(0.15,0.2256)); //0.3756</code></pre></div>\n<p><strong>二是是使用内置的 toPrecision() 和 toFixed() 方法，注意，方法的返回值字符串。（然并卵）</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function add(x, y) {\n return x.toPrecision() + y.toPrecision()\n}\nconsole.log(add(0.1,0.2)); //&quot;0.10.2&quot;</code></pre></div>\n<h4 id=\"9、实现函数-isintegerx-来判断-x-是否是整数\" style=\"position:relative;\"><a href=\"#9%E3%80%81%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0-isintegerx-%E6%9D%A5%E5%88%A4%E6%96%AD-x-%E6%98%AF%E5%90%A6%E6%98%AF%E6%95%B4%E6%95%B0\" aria-label=\"9、实现函数 isintegerx 来判断 x 是否是整数 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9、实现函数 isInteger(x) 来判断 x 是否是整数</h4>\n<p>可以将 x 转换成 10 进制，判断和本身是不是相等即可：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function isInteger(x) {\n return parseInt(x, 10) === x; // 默认是10\n}</code></pre></div>\n<p>ES6 对数值进行了扩展，提供了静态方法 isInteger() 来判断参数是否是整数：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Number.isInteger(25) // true\nNumber.isInteger(25.0) // true\nNumber.isInteger(25.1) // false\nNumber.isInteger(&quot;15&quot;) // false\nNumber.isInteger(true) // false</code></pre></div>\n<p>JavaScript 能够准确表示的整数范围在 -2^53 到 2^53 之间（不含两个端点），超过这个范围，无法精确表示这个值。ES6 引入了<code class=\"language-text\">Number.MAX_SAFE_INTEGER</code> 和 <code class=\"language-text\">Number.MIN_SAFE_INTEGER</code>这两个常量，用来表示这个范围的上下限，并提供了 <code class=\"language-text\">Number.isSafeInteger()</code>来判断整数是否是安全型整数。</p>\n<h4 id=\"10、在下面的代码中，数字-1-4-会以什么顺序输出？为什么会这样输出？\" style=\"position:relative;\"><a href=\"#10%E3%80%81%E5%9C%A8%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%AD%EF%BC%8C%E6%95%B0%E5%AD%97-1-4-%E4%BC%9A%E4%BB%A5%E4%BB%80%E4%B9%88%E9%A1%BA%E5%BA%8F%E8%BE%93%E5%87%BA%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%BF%99%E6%A0%B7%E8%BE%93%E5%87%BA%EF%BC%9F\" aria-label=\"10、在下面的代码中，数字 1 4 会以什么顺序输出？为什么会这样输出？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>10、在下面的代码中，数字 1-4 会以什么顺序输出？为什么会这样输出？</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function() {\n console.log(1);\n setTimeout(function(){console.log(2)}, 1000);\n setTimeout(function(){console.log(3)}, 0);\n console.log(4);\n})();\n// 1,4,3,2</code></pre></div>\n<p>这个就不多解释了，主要是 JavaScript 的定时机制和时间循环，不要忘了，JavaScript 是单线程的。详解可以参考 从 setTimeout 谈 JavaScript 运行机制。</p>\n<h4 id=\"11、写一个少于-80-字符的函数，判断一个字符串是不是回文字符串\" style=\"position:relative;\"><a href=\"#11%E3%80%81%E5%86%99%E4%B8%80%E4%B8%AA%E5%B0%91%E4%BA%8E-80-%E5%AD%97%E7%AC%A6%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E4%B8%8D%E6%98%AF%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2\" aria-label=\"11、写一个少于 80 字符的函数，判断一个字符串是不是回文字符串 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11、写一个少于 80 字符的函数，判断一个字符串是不是回文字符串</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function isPalindrome(str) {\n str = str.replace(/\\W/g, &#39;&#39;).toLowerCase();//？\n return (str == str.split(&#39;&#39;).reverse().join(&#39;&#39;));\n}</code></pre></div>\n<h4 id=\"12、写一个按照下面方式调用都能正常工作的-sum-方法\" style=\"position:relative;\"><a href=\"#12%E3%80%81%E5%86%99%E4%B8%80%E4%B8%AA%E6%8C%89%E7%85%A7%E4%B8%8B%E9%9D%A2%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8%E9%83%BD%E8%83%BD%E6%AD%A3%E5%B8%B8%E5%B7%A5%E4%BD%9C%E7%9A%84-sum-%E6%96%B9%E6%B3%95\" aria-label=\"12、写一个按照下面方式调用都能正常工作的 sum 方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12、写一个按照下面方式调用都能正常工作的 sum 方法</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(sum(2,3)); // Outputs 5\nconsole.log(sum(2)(3)); // Outputs 5</code></pre></div>\n<p>针对这个题，可以判断参数个数来实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//应该是做 curry化处理\n\nfunction sum() {\n    var fir = arguments[0];\n    if (arguments.length === 2) {\n        return arguments[0] + arguments[1]\n    } else {\n        return function (sec) {\n            return fir + sec;\n        }\n    }\n}</code></pre></div>\n<h4 id=\"13、根据下面的代码片段回答后面的问题\" style=\"position:relative;\"><a href=\"#13%E3%80%81%E6%A0%B9%E6%8D%AE%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E5%9B%9E%E7%AD%94%E5%90%8E%E9%9D%A2%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"13、根据下面的代码片段回答后面的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>13、根据下面的代码片段回答后面的问题</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for (var i = 0; i &lt; 5; i++) {\n    var btn = document.createElement(&#39;button&#39;);\n    btn.appendChild(document.createTextNode(&#39;Button &#39; + i));\n    btn.addEventListener(&#39;click&#39;, function () {\n        console.log(i);\n    });\n    document.body.appendChild(btn);\n}</code></pre></div>\n<ol>\n<li>\n<p>点击 Button 4，会在控制台输出什么？</p>\n<ul>\n<li>点击 5 个按钮中的任意一个，都是输出 5</li>\n</ul>\n</li>\n<li>\n<p>给出一种符合预期的实现方式</p>\n<ul>\n<li>参考 IIFE。</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for (var i = 0; i &lt; 5; i++) {\n    var btn = document.createElement(&#39;button&#39;);\n    btn.appendChild(document.createTextNode(&#39;Button &#39; + i));\n    btn.addEventListener(&#39;click&#39;, (function (num) {\n        console.log(num);\n    })(i));\n    document.body.appendChild(btn);\n}</code></pre></div>\n<h4 id=\"14、下面的代码会输出什么？为什么？\" style=\"position:relative;\"><a href=\"#14%E3%80%81%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BC%9A%E8%BE%93%E5%87%BA%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F\" aria-label=\"14、下面的代码会输出什么？为什么？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>14、下面的代码会输出什么？为什么？</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var arr1 = &quot;john&quot;.split(&#39;&#39;); j o h n\nvar arr2 = arr1.reverse(); n h o j\nvar arr3 = &quot;jones&quot;.split(&#39;&#39;); j o n e s\narr2.push(arr3);\nconsole.log(&quot;array 1: length=&quot; + arr1.length + &quot; last=&quot; + arr1.slice(-1));\nconsole.log(&quot;array 2: length=&quot; + arr2.length + &quot; last=&quot; + arr2.slice(-1));</code></pre></div>\n<p><code class=\"language-text\">reverse()</code>会改变数组本身，并返回原数组的引用。故 arr1 和 arr2 是指向同一个数组的。</p>\n<p><strong>这里总结下哪些方法会对数组本身修改，哪些会返回新数组：</strong></p>\n<ul>\n<li>原来 arr 上处理(会改变原来的数组，而不会创建新的数组)：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">forEach：循环每个元素、\n\nevery：全为true时返回true、\n\nsome：只要一个true时返回true、\n\nreduce: 累加、\n\nsplice：数组增删操作，返回删除的元素、\n\nsort: 对数组的元素进行排序、\n\nreverse(): 颠倒数组中元素的顺序。\n\narr.forEach(function(val){})\narr.reduce(function(sum,ele){})</code></pre></div>\n<ul>\n<li>返回新数组：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">map：遍历后返回新数组（和forEach对立）、\n\nfilter：返回判断结果为true的结果、\n\nslice：方法可从已有的数组中返回选定的元素，arrayObject.slice(start,end)、var arr1=arr.slice(0)\n\nconcat(): 连接两个或更多的数组，并返回结果。arr.concat(arr2,arr3)</code></pre></div>\n<h4 id=\"15、关于-number-转化的问题\" style=\"position:relative;\"><a href=\"#15%E3%80%81%E5%85%B3%E4%BA%8E-number-%E8%BD%AC%E5%8C%96%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"15、关于 number 转化的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>15、关于 number 转化的问题</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(1 + &quot;2&quot; + &quot;2&quot;);\nconsole.log(1 + +&quot;2&quot; + &quot;2&quot;);\nconsole.log(1 + -&quot;1&quot; + &quot;2&quot;);\nconsole.log(+&quot;1&quot; + &quot;1&quot; + &quot;2&quot;);\nconsole.log( &quot;A&quot; - &quot;B&quot; + &quot;2&quot;);\nconsole.log( &quot;A&quot; - &quot;B&quot; + 2);</code></pre></div>\n<p>输出什么，自己去运行吧，需要注意三个点：</p>\n<p>多个数字和数字字符串混合运算时，跟操作数的位置有关</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(2 + 1 + &#39;3&#39;); / /‘33&#39;\nconsole.log(&#39;3&#39; + 2 + 1); //&#39;321&#39;</code></pre></div>\n<p>数字字符串之前存在数字中的正负号(+/-)时，会被转换成数字</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(typeof &#39;3&#39;); // string\nconsole.log(typeof +&#39;3&#39;); //number</code></pre></div>\n<p>同样，可以在数字前添加 ”，将数字转为字符串</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(typeof 3); // number\nconsole.log(typeof (&#39;&#39;+3)); //string</code></pre></div>\n<p>对于运算结果不能转换成数字的，将返回 NaN</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(&#39;a&#39; * &#39;sd&#39;); //NaN\nconsole.log(&#39;A&#39; - &#39;B&#39;); // NaN</code></pre></div>\n<h4 id=\"16、如果-list-很大，下面的这段递归代码会造成堆栈溢出。如果在不改变递归模式的前提下修善这段代码？\" style=\"position:relative;\"><a href=\"#16%E3%80%81%E5%A6%82%E6%9E%9C-list-%E5%BE%88%E5%A4%A7%EF%BC%8C%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%BF%99%E6%AE%B5%E9%80%92%E5%BD%92%E4%BB%A3%E7%A0%81%E4%BC%9A%E9%80%A0%E6%88%90%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA%E3%80%82%E5%A6%82%E6%9E%9C%E5%9C%A8%E4%B8%8D%E6%94%B9%E5%8F%98%E9%80%92%E5%BD%92%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%89%8D%E6%8F%90%E4%B8%8B%E4%BF%AE%E5%96%84%E8%BF%99%E6%AE%B5%E4%BB%A3%E7%A0%81%EF%BC%9F\" aria-label=\"16、如果 list 很大，下面的这段递归代码会造成堆栈溢出。如果在不改变递归模式的前提下修善这段代码？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>16、如果 list 很大，下面的这段递归代码会造成堆栈溢出。如果在不改变递归模式的前提下修善这段代码？</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var list = readHugeList();\n\nvar nextListItem = function() {\n var item = list.pop();\n\n if (item) {\n // process the list item...\n nextListItem();\n }\n};</code></pre></div>\n<p>原文上的解决方式是加个定时器：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var list = readHugeList();\n\nvar nextListItem = function() {\n var item = list.pop();\n\n if (item) {\n // process the list item...\n setTimeout( nextListItem, 0);\n }\n};</code></pre></div>\n<p>将其放入异步队列中处理，解决方式的原理请参考第 10 题。</p>\n<h4 id=\"17、什么是闭包？举例说明\" style=\"position:relative;\"><a href=\"#17%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85%EF%BC%9F%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E\" aria-label=\"17、什么是闭包？举例说明 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>17、什么是闭包？举例说明</h4>\n<p>可以参考此篇：从作用域链谈闭包</p>\n<h4 id=\"18、下面的代码会输出什么？为啥？\" style=\"position:relative;\"><a href=\"#18%E3%80%81%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BC%9A%E8%BE%93%E5%87%BA%E4%BB%80%E4%B9%88%EF%BC%9F%E4%B8%BA%E5%95%A5%EF%BC%9F\" aria-label=\"18、下面的代码会输出什么？为啥？ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>18、下面的代码会输出什么？为啥？</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for (var i = 0; i &lt; 5; i++) {\n setTimeout(function() { console.log(i); }, i * 1000 );\n}\n\nout: 5 5 5 5 5</code></pre></div>\n<h4 id=\"19、解释下列代码的输出\" style=\"position:relative;\"><a href=\"#19%E3%80%81%E8%A7%A3%E9%87%8A%E4%B8%8B%E5%88%97%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BE%93%E5%87%BA\" aria-label=\"19、解释下列代码的输出 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>19、解释下列代码的输出</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(&quot;0 || 1 = &quot;+(0 || 1)); 1\nconsole.log(&quot;1 || 2 = &quot;+(1 || 2)); 2\nconsole.log(&quot;0 &amp;&amp; 1 = &quot;+(0 &amp;&amp; 1)); 0\nconsole.log(&quot;1 &amp;&amp; 2 = &quot;+(1 &amp;&amp; 2)); 2</code></pre></div>\n<p>逻辑与和逻辑或运算符会返回一个值，并且二者都是短路运算符：</p>\n<p>逻辑与返回第一个是 false 的操作数 或者 最后一个是 true 的操作数</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(1 &amp;&amp; 2 &amp;&amp; 0); //0\nconsole.log(1 &amp;&amp; 0 &amp;&amp; 1); //0\nconsole.log(1 &amp;&amp; 2 &amp;&amp; 3); //3</code></pre></div>\n<p>如果某个操作数为 false，则该操作数之后的操作数都不会被计算</p>\n<p>逻辑或返回第一个是 true 的操作数 或者 最后一个是 false 的操作数</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(1 || 2 || 0); //1\nconsole.log(0 || 2 || 1); //2\nconsole.log(0 || 0 || false); //false</code></pre></div>\n<p>如果某个操作数为 true，则该操作数之后的操作数都不会被计算</p>\n<p>如果逻辑与和逻辑或作混合运算，则逻辑与的优先级高：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(1 &amp;&amp; 2 || 0); //2\nconsole.log(0 || 2 &amp;&amp; 1); //1\nconsole.log(0 &amp;&amp; 2 || 1); //1</code></pre></div>\n<p>在 JavaScript，常见的 false 值：</p>\n<p>0, ‘0’, +0, -0, false, ”,null,undefined,null,NaN</p>\n<p>要注意空数组([])和空对象({}):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log([] == false) //true\nconsole.log({} == false) //false\nconsole.log(Boolean([])) //true\nconsole.log(Boolean({})) //true</code></pre></div>\n<p>所以在 if 中，[] 和 {} 都表现为 true，注意两者都是引用类型，只要定义就存在。</p>\n<h4 id=\"20、解释下面代码的输出\" style=\"position:relative;\"><a href=\"#20%E3%80%81%E8%A7%A3%E9%87%8A%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BE%93%E5%87%BA\" aria-label=\"20、解释下面代码的输出 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>20、解释下面代码的输出</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log(false == &#39;0&#39;)//-&gt;console.log(toNumber(false) == &#39;0&#39;) -&gt;true\nconsole.log(false === &#39;0&#39;)//-&gt;console.log(0 === &#39;0&#39;)-&gt;false</code></pre></div>\n<p>参考此图的解释：</p>\n<p><img src=\"http://xiangsongtao.com/uploads/1474859620000.png\" alt=\"参考此图的解释\"></p>\n<h4 id=\"21、解释下面代码的输出\" style=\"position:relative;\"><a href=\"#21%E3%80%81%E8%A7%A3%E9%87%8A%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BE%93%E5%87%BA\" aria-label=\"21、解释下面代码的输出 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>21、解释下面代码的输出</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var a={},\n b={key:&#39;b&#39;},\n c={key:&#39;c&#39;};\n\na[b]=123;\na[c]=456;\n\nconsole.log(a[b]);//456</code></pre></div>\n<h4 id=\"22、解释下面代码的输出\" style=\"position:relative;\"><a href=\"#22%E3%80%81%E8%A7%A3%E9%87%8A%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BE%93%E5%87%BA\" aria-label=\"22、解释下面代码的输出 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>22、解释下面代码的输出</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">console.log((function f(n){return ((n &gt; 1) ? n * f(n-1) : n)})(10));</code></pre></div>\n<p>结果是 10 的阶乘。这是一个递归调用，为了简化，我初始化 n=5，则调用链和返回链如下：</p>\n<p><img src=\"http://files.jb51.net/file_images/article/201512/2015122992756570.png?201511299284\"></p>\n<h4 id=\"23、解释下面代码的输出\" style=\"position:relative;\"><a href=\"#23%E3%80%81%E8%A7%A3%E9%87%8A%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BE%93%E5%87%BA\" aria-label=\"23、解释下面代码的输出 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>23、解释下面代码的输出</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(function(x) {\n return (function(y) {\n console.log(x);\n })(2)\n})(1);</code></pre></div>\n<p>输出 1，闭包能够访问外部作用域的变量或参数。</p>\n<h4 id=\"24、解释下面代码的输出，并修复存在的问题\" style=\"position:relative;\"><a href=\"#24%E3%80%81%E8%A7%A3%E9%87%8A%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BE%93%E5%87%BA%EF%BC%8C%E5%B9%B6%E4%BF%AE%E5%A4%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"24、解释下面代码的输出，并修复存在的问题 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>24、解释下面代码的输出，并修复存在的问题</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var hero = {\n _name: &#39;John Doe&#39;,\n getSecretIdentity: function (){\n return this._name;\n }\n};\n\nvar stoleSecretIdentity = hero.getSecretIdentity;\n\nconsole.log(stoleSecretIdentity());\nconsole.log(hero.getSecretIdentity());</code></pre></div>\n<p>将 getSecretIdentity 赋给 stoleSecretIdentity，等价于定义了 stoleSecretIdentity 函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var stoleSecretIdentity = function (){\n return this._name;\n}\nstoleSecretIdentity</code></pre></div>\n<p>的上下文是全局环境，所以第一个输出 undefined。若要输出 John Doe，则要通过 call 、apply 和 bind 等方式改变 stoleSecretIdentity 的 this 指向(hero)。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var stoleSecretIdentity = hero.getSecretIdentity.call(hero)</code></pre></div>\n<p>第二个是调用对象的方法，输出 John Doe。</p>\n<h4 id=\"25、给你一个-dom-元素，创建一个能访问该元素所有子元素的函数，并且要将每个子元素传递给指定的回调函数。\" style=\"position:relative;\"><a href=\"#25%E3%80%81%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA-dom-%E5%85%83%E7%B4%A0%EF%BC%8C%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%83%BD%E8%AE%BF%E9%97%AE%E8%AF%A5%E5%85%83%E7%B4%A0%E6%89%80%E6%9C%89%E5%AD%90%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E5%B9%B6%E4%B8%94%E8%A6%81%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%AD%90%E5%85%83%E7%B4%A0%E4%BC%A0%E9%80%92%E7%BB%99%E6%8C%87%E5%AE%9A%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E3%80%82\" aria-label=\"25、给你一个 dom 元素，创建一个能访问该元素所有子元素的函数，并且要将每个子元素传递给指定的回调函数。 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>25、给你一个 DOM 元素，创建一个能访问该元素所有子元素的函数，并且要将每个子元素传递给指定的回调函数。</h4>\n<p>函数接受两个参数：</p>\n<ul>\n<li>DOM</li>\n<li>指定的回调函数</li>\n</ul>\n<p>原文利用 深度优先搜索(Depth-First-Search) 给了一个实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Traverse(p_element, p_callback) {\n    p_callback(p_element);\n    var list = p_element.children;\n    for (var i = 0; i &lt; list.length; i++) {\n        Traverse(list[i], p_callback); // recursive call\n    }\n}</code></pre></div>\n<p>以上就是为大家分享的 25 个 JavaScript 面试题，希望对大家参加面试有所帮助。</p>\n<p>（完）</p>","timeToRead":22,"wordCount":{"paragraphs":96,"sentences":98,"words":501},"fields":{"slug":"/25-ge-mian-shi-ti/","relativePath":"2016/2016-10-24---25-ge-mian-shi-ti/index.md"},"excerpt":"无意在网上看到的，特此记录。原文在此 1、使用 typeof bar === “object” 判断 bar 是不是一个对象有神马潜在的弊端？如何避免这种弊端？ 使用 typeof…","frontmatter":{"title":"25个面试题，值得再看一遍","date":"20 Oct 2016","tags":["面试"],"cover":"","comments":true,"author":"烈风裘"}}},"pageContext":{"curr":"/setTimeout-yan-shi-0-hao-miao-de/","prev":"/25-ge-mian-shi-ti/","next":"/Manifest-de-di-shi-yong/"}},"staticQueryHashes":["3240721340","63159454"]}