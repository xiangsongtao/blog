{"componentChunkName":"component---src-templates-author-page-js","path":"/author/烈风裘/8","result":{"data":{"authorJson":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/me.jpeg","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"},"allAuthorJson":{"totalCount":2,"edges":[{"node":{"id":"烈风裘","avatar":"/avatar/me.jpeg"}},{"node":{"id":"WALL-E","avatar":"/avatar/cleaner.jpg"}}]},"site":{"siteMetadata":{"title":"Attila","cover":"/background/1.jpg","author":"@烈风裘","description":"Thoughts, stories and ideas.","keywords":["烈风裘的博客","X-Blog","Attila","Gatsby","前端成长记录"],"tagCover":"/background/5.jpg","archiveCover":"/background/escape-flight.png","siteUrl":"https://xiangst0816.github.io/blog","logo":"","navigation":true,"subscribe":true}},"otherAuthorsInfo":{"edges":[{"node":{"id":"WALL-E","avatar":"/avatar/cleaner.jpg","master":false}}]},"allMarkdownRemark":{"totalCount":85},"currentMarkdownRemark":{"totalCount":85,"edges":[{"node":{"excerpt":"常用的类型判断 typeof 在进行类型判断时，第一反应是使用 typeof 来做，写法： 但是这个方法可返回的类型只有以下几种（注意都是小写）： (对象,数组,日期和 null)、 、、、、 需要特别注意的是，使用 typeof 判断未定义的变量不会抛出异常，但是其余方法都会！ instanceof 判断 instanceof 用于判断一个变量是否某个对象的实例，是一个三目运算式 这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom…","fields":{"slug":"/JS-lei-xing-pan-duan/"},"frontmatter":{"title":"JS类型判断","tags":["JavaScript"],"star":false,"date":"20 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"无意在网上看到的，特此记录。原文在此 1、使用 typeof bar === “object” 判断 bar 是不是一个对象有神马潜在的弊端？如何避免这种弊端？ 使用 typeof 的弊端是显而易见的(这种弊端同使用 instanceof)： 从上面的输出结果可知，typeof bar === “object” 并不能准确判断 bar 就是一个 Object。可以通过 Object.prototype.toString.call(bar) === ”object Object…","fields":{"slug":"/25-ge-mian-shi-ti/"},"frontmatter":{"title":"25个面试题，值得再看一遍","tags":["面试"],"star":false,"date":"20 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"相信这样的代码我们都是遇到过的, 但是思考为什么这么用而不用其他的办法的人估计就很少了，今天遇到，在此记录。 先解释下 JavaScript 单线程模型 原文由此进入 首先我们来看浏览器下的 JavaScript： 浏览器的内核是多线程的，它们在内核制控下相互配合以保持同步，一个浏览器至少实现三个常驻线程：JavaScript 引擎线程，GUI 渲染线程，浏览器事件触发线程。 JavaScript 引擎是基于事件驱动单线程执行的，JS…","fields":{"slug":"/setTimeout-yan-shi-0-hao-miao-de/"},"frontmatter":{"title":"setTimeout延时0毫秒的作用","tags":["JavaScript"],"star":false,"date":"20 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"为了加快网页的访问速度，对请求资源进行缓存是一个常用的策略。当客户端发送资源请求后，如果资源未过期，则服务器返回 304 代表资源未修改使用浏览器本地缓存，但是这个过程还是会发生 TCP 连接，如果不发送请求就能知道本地的缓存副本就是最新的按就好了。 其中的一个解决方案就是使用 HTML5 的最新特性离线存储(manifest)来解决。通过离线存储，我们可以通过把需要离线存储在本地的文件列在一个 manifest 配置文件中，这样即使在离线的情况下，用户也可以正常使用 App…","fields":{"slug":"/Manifest-de-di-shi-yong/"},"frontmatter":{"title":"Manifest的使用","tags":["缓存"],"star":false,"date":"20 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"思考这个问题主要是有人问到过我：用户登录的密码是如何保护的，又是如何在网络传输下让黑客看到也拿破解不了用户密码，也无法再次模拟登录？ 好吧，一个是将密码使用 MD5 加密传输，另一个是使用 HTTPs 协议。 对于我这个小网站，用 HTTPs 有些大题小做，那如果不用 HTTPs 呢？ 登录设计 对此我想了下设计了下面登录方式（时序图）： 登录时序图 过程分析 用户发起登录请求 服务器根据用户 IP 及服务器时间，返回上图所写的格式数据。将当前请求信息用 MD…","fields":{"slug":"/deng-lu-liu-cheng-jia-mi-de-di-si-sai-kao/"},"frontmatter":{"title":"登录流程加密的思考","tags":["随笔"],"star":false,"date":"20 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"转载这篇文章,文章里面内容就不再展开，感兴趣的可以看下，地址点击这里。 下面是我的评价： 文章里说的都是基础，有些实际应用中的问题如果基础比较好的话能够深挖问题背后的原因，方便解决问题。我觉得基础是一个内化的过程，而不是背诵的过程。遇到问题深挖一下，然后在琢磨下背后的原理，这样比背诵的效果会好很多。比如，这样问应聘者： 问：每天早上一打开网页就出现电信在右下角的小广告，需求说要避免这种情况，你该如何处理？ 答： 1. 如果特征相同的话，插入到 html 中的代码应该都是 ifream…","fields":{"slug":"/zhuan-zai-qian-duan-wo/"},"frontmatter":{"title":"(转载)前端，我为什么不要你","tags":["随笔"],"star":false,"date":"20 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"透明度 主要是兼容 IE6+的写法，当我们在兼容低版本浏览器的时候可能下面的写法可以满足我们的需求（两个属性都写上，浏览器识别的属性直接覆盖前者的属性）： html5 标签唤起发短信功能 做 html5 开发的过程中，我们可能会有这样的需求： 点击按钮，呼起系统的发送短信的窗口，并且自动填充发送到的号码和内容。网络上可以很容易的找到这方面的 demo ，并且也可以找到在安卓上和 iOS 上是有却别的（body 之前的标示）： 这里有图片 input 标签选择系统文件的问题 在 html…","fields":{"slug":"/H5-yi-dong-kai-fa-zong-jie/"},"frontmatter":{"title":"H5移动开发总结","tags":["Mobile"],"star":false,"date":"20 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"前言介绍，因为在给网站升级 https，其中涉及到修改文件内容等操作，于是阴差阳错的将/etc 文件全部了，结果导致阿里云服务器远程 SSH 无法登录及 FTP 也无法使用。 更悲催的是，我之前都没做过数据库镜像备份及数据库备份，想着应该不会发生，结果还是发生了。从客服了解到，只能重置服务器，让我将‘受伤’的系统盘做一个镜像。等新系统初始化完毕之后挂载镜像再做修复。 于是，就有了这边文章的起源。从零开始部署+修复数据。不过，没想象的难。 MEVN 这个单词是 Mongodb、Express…","fields":{"slug":"/cong-zong-ling-kai-shi-MEVN-huan-jing/"},"frontmatter":{"title":"从零开始MEVN环境部署","tags":["MEVN"],"star":false,"date":"18 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"RESTful 架构 REST 是 Representational State Transfer 的缩写，表示“表现层状态转移”。这个其实是在讲一个过程。 很久之前，用户访问服务器的时候，服务器是主角。他根据用户的请求决定发送设么东西给客户端，而客户端只有接收的“命”； 现在 REST 来了，主角现在是用户，用户通过 HTTP 协议中的多种请求状态（GET、POST、PUT、DELETE 等），要求服务器按照 URL 中的参数将资源返回。这时服务器就像一个静态的资源服务器一样，每一个 URI…","fields":{"slug":"/RESTful-she-ji/"},"frontmatter":{"title":"RESTful设计","tags":["RESTful"],"star":false,"date":"17 Oct 2016","author":"烈风裘"}}},{"node":{"excerpt":"WebP 是一种图片压缩格式，主要应用在网络中传输图片，减小带宽及存储空间。在相同的精细度的情况下，WebP 拥有更小的文件尺寸，其在 Google 的产品中广为应用。 使用场景 桌面浏览器： 谷歌浏览器能完全展示，但是 Firefox 不行 手机浏览器：完全不行，例如 IOS 的 Safari 及微信浏览器 APP：Android 和 IOS 图片展示需要专门的解析库 APP 中使用特性 解析性能 其中解码时间，WebP 的解码时间是 PNG 格式的 4.4 ~ 5 倍，流畅度、CPU…","fields":{"slug":"/webp/"},"frontmatter":{"title":"webp","tags":["WebP"],"star":false,"date":"17 Oct 2016","author":"烈风裘"}}}]}},"pageContext":{"skip":70,"limit":10,"author":"烈风裘"}},"staticQueryHashes":["3240721340","63159454"]}