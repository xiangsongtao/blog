{"componentChunkName":"component---src-templates-blog-post-js","path":"/VueIntroduce/","result":{"data":{"site":{"siteMetadata":{"title":"Attila","cover":"/background/1.jpg","description":"Thoughts, stories and ideas.","keywords":["烈风裘的博客","X-Blog","Attila","Gatsby","前端成长记录"],"tagCover":"/background/5.jpg","archiveCover":"/background/escape-flight.png","siteUrl":"https://xiangst0816.github.io/blog","logo":"","navigation":true,"subscribe":true}},"allAuthorJson":{"totalCount":2,"edges":[{"node":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/avatar.png","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"}},{"node":{"id":"WALL-E","bio":"还有要清理的吗?","avatar":"/avatar/cleaner.jpg","cover":"","github":null,"twitter":null,"zhihu":null,"weibo":null,"facebook":null,"website":null,"location":"Earth"}}]},"master":{"id":"烈风裘","bio":"一往无前, 直到云开雾散!","avatar":"/avatar/avatar.png","cover":"/background/photo-1503197979108-c824168d51a8.jpeg","github":"https://github.com/xiangst0816","twitter":"","zhihu":"","weibo":"","facebook":"","website":"https://xiangst0816.github.io/blog/","location":"HangZhou, China"},"currentPost":{"html":"<p>这篇 PPT 是关于最近在做 H5 版杭州公交的经验分享，里面部分细节也包括工作一年的总结。</p>\n<h2 id=\"简介\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E4%BB%8B\" aria-label=\"简介 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简介</h2>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464550000.jpeg\" alt=\"简介\"></p>\n<p>Vue 是我在 8 月份第一次接触，用周末两天时间熟悉了下 API 及 Vue 全家桶，框架学完练练手可以熟悉思路，在之后的项目中能马上使用到。所以我将我的博客从 Angualr1.3 改写到 Vue1.0，花了不少下班时间。项目是由 vue-cli 基础上开发，现已在 GitHub 上开源，另外还包括对博客支持的后台代码，使用的是 Node+Express+Mongodb。</p>\n<p>之后 Vue2.0 发布后，趁着项目测试的空隙，又将博客升级到 2.0，改动的部分及总结在博客中已写出，可以作为升级的参考，<a href=\"http://xiangsongtao.com/article/5846277f089b4c33d4ec79a9\" target=\"_target\" rel=\"nofollow\">链接</a>。到目前为止，已经使用 Vue 直接开发了 3 个项目，加上今天的分享，应该是第四个了。因为 Vue 对浏览器的唯一的限制是 IE9+，故移动端应该是没问题的。</p>\n<h2 id=\"目录\" style=\"position:relative;\"><a href=\"#%E7%9B%AE%E5%BD%95\" aria-label=\"目录 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目录</h2>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464684000.jpeg\" alt=\"目录\"></p>\n<p>这个是 ppt 的顺序，有些思路可能某些同学没接触过，我也是用比较形象的方式给大家讲解。我希望以后大家在学到新的东西都能通过这种方式分享出来共同进步，回顾总结，加深自己的印象。</p>\n<h2 id=\"如何选择框架\" style=\"position:relative;\"><a href=\"#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E6%A1%86%E6%9E%B6\" aria-label=\"如何选择框架 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何选择框架</h2>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464705000.jpeg\" alt=\"如何选择框架\"></p>\n<p>这里主要是我对我已有的经验来分析如何根据项目来选择框架。可能由我的局限性，希望能和大家碰撞下思想。</p>\n<h3 id=\"1-对于后台管理系统\" style=\"position:relative;\"><a href=\"#1-%E5%AF%B9%E4%BA%8E%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F\" aria-label=\"1 对于后台管理系统 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 对于后台管理系统</h3>\n<p>我曾经使用过两次 jQuery+ifream 框架（二次维护，历史遗留问题），通过接口获取数据后拼接 HTML 字符串然后 append 到 DOM 中，因为需求没有设计成 UI，当时拿到的是功能清单，UI 只能靠我们前端自己设计。因此在写 render 函数之前，我将画好的 UI 给 leader 看，然后讨论交互，连问多遍有没问题后才敢开始写 render 函数，因为需求改动后，render 函数就会废弃再写！不过最后结果还好，返工的不多。另一个是给后台写 jsp 模板，分不清前后端界线，js 交互也不敢多写（后端同学理解 JS 也是头疼）。</p>\n<p>以上，也许也能看出问题点了，代码无法复用，需求改动后代码改动多；前后端界线不清，工作内容会有重叠，口头确认不是很好的规范。所以我倾向于基于 MVVM 模式的 SPA 系统。前后端由 API 文档划分界线，因为不涉及到首次加载速度、浏览器适配范围和 SEO 等问题，我认为 SPA 的方式是可行的，也是大多数公司在用的方式，例如阿里云控制台、收钱吧控制台、盈联智能商户管理系统等。</p>\n<h3 id=\"2-对于面对消费者的-pc-页面\" style=\"position:relative;\"><a href=\"#2-%E5%AF%B9%E4%BA%8E%E9%9D%A2%E5%AF%B9%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84-pc-%E9%A1%B5%E9%9D%A2\" aria-label=\"2 对于面对消费者的 pc 页面 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 对于面对消费者的 PC 页面</h3>\n<p>这种场景，使用后端渲染的方式无可厚非，加载快，利于 SEO，页面可缓存等优点。</p>\n<h3 id=\"3-移动端展示类型的页面\" style=\"position:relative;\"><a href=\"#3-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B1%95%E7%A4%BA%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%A1%B5%E9%9D%A2\" aria-label=\"3 移动端展示类型的页面 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 移动端展示类型的页面</h3>\n<p>这种情况大多数不会超过 5 个页面（类似于抽奖、活动展示、答题、留言板等），且页面间衔接的紧密度不高，使用 zepto 框架即可。开发快速，a 标签跳转，如果不喜欢 300ms 点击延迟，那就上 fastclick 就好，一般开发人员就能胜任。</p>\n<h3 id=\"4-移动微应用\" style=\"position:relative;\"><a href=\"#4-%E7%A7%BB%E5%8A%A8%E5%BE%AE%E5%BA%94%E7%94%A8\" aria-label=\"4 移动微应用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 移动微应用</h3>\n<p>最后一个场景就是较为复杂的移动微应用，<strong>古老的方法</strong>是使用后端渲染的方式进行，例如 jsp、hbs 等，如果不同页面间数据需要传递也只能放到 url 中或者 sessionStorage 或者 localStorage 中，开发逻辑不好维护，需要加大量的注释。页面跳转还需要再次加载公共的脚本，如果服务器开了缓存还好，否则用户体验不好。我这里倾向于使用 SPA 模式开发，由路由控制增量加载的内容（懒加载），webpack 进行代码分割，确保首屏之外的资源按需加载。前端控制范围增多，API 划分界限。</p>\n<h2 id=\"mvc-和-mvvm-对比\" style=\"position:relative;\"><a href=\"#mvc-%E5%92%8C-mvvm-%E5%AF%B9%E6%AF%94\" aria-label=\"mvc 和 mvvm 对比 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 和 MVVM 对比</h2>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464740000.jpeg\" alt=\"MVC和MVVM对比\"></p>\n<p>Vue 是基于 MVVM 开发模式的框架。在 MVVM 之前还有很多开发模式，不过都被踩在时代的脚下，比如 MVC。就我经验所及的范围，我认为 MVVM 在处理 UI 交互方面应该是抽象的最全面的模式。</p>\n<p>上张图是 MVVM 的结构，在 SilverLight 或者 WPF 开发中常用的模式，同理，前端也是和 UI 交互的部分，模式借鉴很有意义。View 层只依赖数据，降低 View-Model 与 View 之间的耦合；只要数据相同，View-Model 可复用，UI 测试转化为对 Data 的测试。</p>\n<p>jQuery 是 MVC 开发模式的一个代表。在 jQuery 代码中，controller 中存在大量的和 view 耦合的逻辑，例如 jq 中的 html 片段拼接，无法复用和维护困难。另外，controller 基本没有测试的可能。</p>\n<h2 id=\"mvc-和-mvvm-业务实现区别\" style=\"position:relative;\"><a href=\"#mvc-%E5%92%8C-mvvm-%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%88%AB\" aria-label=\"mvc 和 mvvm 业务实现区别 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 和 MVVM 业务实现区别</h2>\n<h3 id=\"1-mvc-方式\" style=\"position:relative;\"><a href=\"#1-mvc-%E6%96%B9%E5%BC%8F\" aria-label=\"1 mvc 方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. MVC 方式</h3>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464793000.jpeg\" alt=\"MVC方式\"></p>\n<p>以我现在在做的页面对 MVC 和 MVVM 做个对比。</p>\n<p>页面 1 是第一次的需求，我按照页面将 HTML 片段和数据拼接写好 render 函数，之后 append 到页面中，数据通过 ajax 获取。当 UED 改图时（页面 2），可以看出页面的结构发生了变化：由之前的上下结构变成了左右结构，对用的 HTML 片段也要发生变化，故 render 函数需要修改以适应新需求，我醉了。。。这种需求以前遇到很多回了！view 和 controlelr 高度耦合，并且 HTML 片段不易再次维护，不可测试也无法复用。</p>\n<h3 id=\"2-mvvm-方式\" style=\"position:relative;\"><a href=\"#2-mvvm-%E6%96%B9%E5%BC%8F\" aria-label=\"2 mvvm 方式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. MVVM 方式</h3>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464827000.jpeg\" alt=\"MVVM方式\"></p>\n<p>如果页面是使用 MVVM 模式做的话，从上面可看出，页面的数据是没变动的，只是 HTML 变动，故使用 Vue 双向绑定的基础功能，我这里只需要修改 HTML 即可，View-Model 中的代码无需修改。另外，只要数据格式没问题，页面的渲染效果也固定，可测试。之后讲解下代码复用部分。</p>\n<h3 id=\"3-view-model-代码复用\" style=\"position:relative;\"><a href=\"#3-view-model-%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8\" aria-label=\"3 view model 代码复用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. View-Model 代码复用</h3>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464853000.jpeg\" alt=\"View-Model代码复用\"></p>\n<p>换乘摘要[1]、换乘详情[2]、换乘地图[3]三部分的页面有公共个数据部分：URL 参数（起始终止位置信息+换乘策略信息）、当前策略下换乘信息（allData -> 包含起止经纬度、摘要和详情），换乘地图独用 transferMap。因此，此部分的 View-Model 可复用，只需要判断 path 后开启必要的部分即可。</p>\n<p><strong>以上就是 MVVM 的三个优点：</strong>低耦合、可复用、可测试、易维护。</p>\n<h2 id=\"vue-性能\" style=\"position:relative;\"><a href=\"#vue-%E6%80%A7%E8%83%BD\" aria-label=\"vue 性能 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue 性能</h2>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464887000.jpeg\" alt=\"Vue性能\"></p>\n<p>我一般在使用 Vue 都是在做移动端开发，既然选用是看中他的两个特性：<strong>运行快+加载快</strong>；上图是 Vue2.0 的综合性能对比图，右边是 Benchmark 跑分（不服跑跑分），绿色越深代表越好。红框圈出的部分从左到右依次是 react、Vue2.0、原生 JS。想必大家能看出来差异了。值得一说的是，Vue2.0 是基于更快的 Virtual-DOM。</p>\n<h2 id=\"vue-构建大型项目及生态\" style=\"position:relative;\"><a href=\"#vue-%E6%9E%84%E5%BB%BA%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%8F%8A%E7%94%9F%E6%80%81\" aria-label=\"vue 构建大型项目及生态 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vue 构建大型项目及生态</h2>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464916000.jpeg\" alt=\"Vue构建大型项目及生态\"></p>\n<p>Vue 在构建大型项目也不逊色，因为 Vue.js 自身只是处理 View 层的框架，做大型项目需要协同插件的协助，这个与 react 很像。可以说 Vue 构建大型项目的插件都已完备。参见上图。</p>\n<h2 id=\"我为什么使用-vue\" style=\"position:relative;\"><a href=\"#%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8-vue\" aria-label=\"我为什么使用 vue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>我为什么使用 Vue</h2>\n<p><img src=\"http://xiangsongtao.com/uploads/1481464940000.jpeg\" alt=\"我为什么使用Vue\"></p>\n<p>最后说下我为什么倾向于使用 Vue。我认为，工具的价值在于为人服务。Vue 及其附属的 Vue-cli 工具很好的在开发者体验和最终生成代码之间做好了桥梁，即：说明文档详细，代码编写简单，API 抽象到位方便别人阅读，最终代码运行高效。</p>\n<p>另外，框架的选择取决于团队的水平，Vue 还是很简单的，而且还是中文文档哦。</p>\n<h2 id=\"最后\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%90%8E\" aria-label=\"最后 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最后</h2>\n<blockquote>\n<p><strong>用了 Vue，我可以正常下班了</strong></p>\n</blockquote>\n<p>(完)</p>","timeToRead":7,"wordCount":{"paragraphs":50,"sentences":50,"words":454},"fields":{"slug":"/VueIntroduce/","relativePath":"2016/2016-12-11---VueIntroduce/index.md"},"excerpt":"这篇 PPT 是关于最近在做 H5 版杭州公交的经验分享，里面部分细节也包括工作一年的总结。 简介 简介 Vue 是我在 8 月份第一次接触，用周末两天时间熟悉了下 API 及 Vue…","frontmatter":{"title":"Vue Introduce","date":"11 Dec 2016","tags":["Vue"],"cover":"","comments":true,"author":"烈风裘"}},"nextPost":{"html":"<p>这篇文章主要介绍了如何在 WebStorm 中进行配置达到对 Vue 的完美支持，包括代码检查、自动排版等。</p>\n<h2 id=\"plugins-安装\" style=\"position:relative;\"><a href=\"#plugins-%E5%AE%89%E8%A3%85\" aria-label=\"plugins 安装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Plugins 安装</h2>\n<p>首先两个插件是必不可缺少的，这个需要在 WebStorm->Preferences->Plugins 中搜索’vue-for-idea’插件。另外’Vue.js’这个插件不好用，别安装！！</p>\n<h2 id=\"默认模板修改\" style=\"position:relative;\"><a href=\"#%E9%BB%98%E8%AE%A4%E6%A8%A1%E6%9D%BF%E4%BF%AE%E6%94%B9\" aria-label=\"默认模板修改 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>默认模板修改</h2>\n<p>依次进入顺序：</p>\n<blockquote>\n<p>WebStorm->Preferences->Editor->Code Stype->File andCode Templates</p>\n</blockquote>\n<p>之后选择 Vue File，下面是我的模板，制定 style 和 script 的类型是为了能够自动格式化。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>header-component</span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>this is template body<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>other-component</span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">scoped</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scss<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">body</span><span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>#ff0000<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/ecmascript-6<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">import</span> HeaderComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/header.vue'</span>\n    <span class=\"token keyword\">import</span> OtherComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./components/other.vue'</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">{</span>\n                msg<span class=\"token operator\">:</span><span class=\"token string\">'hello vue'</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'other-component'</span><span class=\"token operator\">:</span>OtherComponent<span class=\"token punctuation\">,</span>\n            HeaderComponent<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"注册文件模板\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E5%86%8C%E6%96%87%E4%BB%B6%E6%A8%A1%E6%9D%BF\" aria-label=\"注册文件模板 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注册文件模板</h2>\n<p>依次进入顺序：</p>\n<blockquote>\n<p>WebStorm->Preferences->Editor->Code Stype->File Types</p>\n</blockquote>\n<p>之后选择 Vue，在下面添加对 vue 的支持，输入：<code class=\"language-text\">*.vue</code>。如果已经默认改好了，那就不修改了。</p>\n<h2 id=\"script-代码片段绿色背景\" style=\"position:relative;\"><a href=\"#script-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E7%BB%BF%E8%89%B2%E8%83%8C%E6%99%AF\" aria-label=\"script 代码片段绿色背景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Script 代码片段绿色背景</h2>\n<p>完成以上的设置后，会在 Script 代码片段处出现绿色的背景提示，虽然不影响排版和代码错误检查，但是影响编程心情，问题如下：</p>\n<p><img src=\"http://xiangsongtao.com/uploads/1481340380000.png\"></p>\n<p>这个问题也一直困扰了我很久，在网上也没找到答案，偶然一次在查看代码片段配色的时候找到了这个设置，这里分享下，依次点击进入：</p>\n<blockquote>\n<p>WebStorm->Preferences->Editor->Color&#x26;Fonts->General->Code->inject language fragment->Background</p>\n</blockquote>\n<p>Background 不设置颜色，之后 Apply 就好了。</p>\n<p><img src=\"http://xiangsongtao.com/uploads/1481340545000.png\"></p>\n<p>（完）</p>","timeToRead":2,"wordCount":{"paragraphs":17,"sentences":17,"words":83},"fields":{"slug":"/WebStorm-zhong-dui-Vue-de-d/","relativePath":"2016/2016-12-10---WebStorm-zhong-dui-Vue-de-d/index.md"},"excerpt":"这篇文章主要介绍了如何在 WebStorm 中进行配置达到对 Vue 的完美支持，包括代码检查、自动排版等。 Plugins 安装 首先两个插件是必不可缺少的，这个需要在 WebStorm->Preferences…","frontmatter":{"title":"WebStorm中对Vue的支持","date":"10 Dec 2016","tags":["WebStorm","Vue"],"cover":"","comments":true,"author":"烈风裘"}},"prevPost":{"html":"<p>这个不是业务的要求，但是看到每次进入页面就重新渲染 DOM 然后再获取数据更新 DOM，觉得作为一个前端工程师有必要优化下的加载逻辑，正好 vue 提供了<code class=\"language-text\">keep-alive</code>的功能，所以就试用了下。当然，干任何事儿都不会一帆风顺的，在路上的磕磕碰碰在所难免，故在此记录下遇到的问题，希望看到这篇文章的人能有所帮助。ps：这个也没多难。</p>\n<p>HTML 部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>keep-alive</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>JavaScript 部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token function-variable function\">created</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">mounted</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">activated</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">deactivated</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"1-什么阶段获取数据\" style=\"position:relative;\"><a href=\"#1-%E4%BB%80%E4%B9%88%E9%98%B6%E6%AE%B5%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\" aria-label=\"1 什么阶段获取数据 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 什么阶段获取数据</h2>\n<p>页面生命周期钩子如上面的代码所示，这四个是最常用到的部分。这部分需要注意下，当引入<code class=\"language-text\">keep-alive</code>的时候，页面第一次进入，钩子的触发顺序 created-> mounted-> activated，退出时触发 deactivated。当再次进入（前进或者后退）时，只触发 activated。</p>\n<p>我们知道<code class=\"language-text\">keep-alive</code>之后页面模板第一次初始化解析变成 HTML 片段后，再次进入就不在重新解析而是读取内存中的数据，即，只有当数据变化时，才使用 VirtualDOM 进行 diff 更新。故，页面进入的数据获取应该在 activated 中也放一份。数据下载完毕手动操作 DOM 的部分也应该在 activated 中执行才会生效。</p>\n<p>所以，应该 activated 中留一份数据获取的代码，或者不要 created 部分，直接将 created 中的代码转移到 activated 中。</p>\n<h2 id=\"2-code-classlanguage-textroutecode中的数据读不到\" style=\"position:relative;\"><a href=\"#2-code-classlanguage-textroutecode%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%BB%E4%B8%8D%E5%88%B0\" aria-label=\"2 code classlanguage textroutecode中的数据读不到 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. <code class=\"language-text\">$route</code>中的数据读不到</h2>\n<p>以前的写法是在 data 中将需要的<code class=\"language-text\">$route</code>数据进行赋值，便于其余方法使用，但是使用了<code class=\"language-text\">keep-alive</code>后数据需要进入页面在 activated 中再次获取，才能达到更新的目的。定义一个 initData 方法，然后在 activated 中启动。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">initData</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        _this<span class=\"token punctuation\">.</span>fromLocation <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>fromLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _this<span class=\"token punctuation\">.</span>toLocation <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>toLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _this<span class=\"token punctuation\">.</span>activeIndex <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>activeIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        _this<span class=\"token punctuation\">.</span>policyType <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>policyType<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"3-当页动态修改-url\" style=\"position:relative;\"><a href=\"#3-%E5%BD%93%E9%A1%B5%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9-url\" aria-label=\"3 当页动态修改 url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 当页动态修改 url</h2>\n<p>需求描述：当页面在进行轮播操作的时候希望能记录当前显示的轮播 ID(activeIndex)。当进入下一个页面再返回的时候能记住之前的选择，将轮播打到之前的 ID 位置。所以我想将这部分信息固化在 url 中，轮播发生变化时，修改 URL。这样实现比较符最小修改原则，其余页面不用变动。</p>\n<p>之前的写法是将 activeIndex 放在<code class=\"language-text\">$route</code>的 query 中，当轮播后，将\nactiveIndex 的值存入<code class=\"language-text\">$route.query.activeIndex</code>中，然后<code class=\"language-text\">$router.replace</code>当前路由，理论上应该能发生变化，但实际没有。</p>\n<p>查看文档后说，<code class=\"language-text\">$route</code>是只读模式。当然，对象部分是他监管不到的，我修改了并不是正统的做法。</p>\n<p><strong>神奇的地方来了</strong>：当我将 activeIndex 记在 params 中，轮播变动修改 params 中的参数，然后<code class=\"language-text\">$router.replace</code>当前路由，却能发生对应的变化。代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> swiperInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Swiper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#swiper\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  pagination<span class=\"token operator\">:</span> <span class=\"token string\">\".swiper-pagination\"</span><span class=\"token punctuation\">,</span>\n  paginationClickable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  initialSlide<span class=\"token operator\">:</span> activeIndex<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSlideChangeEnd</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">swiper</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _activeIndex <span class=\"token operator\">=</span> swiper<span class=\"token punctuation\">.</span>activeIndex<span class=\"token punctuation\">;</span>\n    _this<span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>activeIndex <span class=\"token operator\">=</span> _activeIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// $router我放到了window上方便调用</span>\n    window<span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> _this<span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      params<span class=\"token operator\">:</span> _this<span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span>\n      query<span class=\"token operator\">:</span> _this<span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 根据activeIndex，在这里初始化下面显示的数据</span>\n    _this<span class=\"token punctuation\">.</span>transferDetail <span class=\"token operator\">=</span> _this<span class=\"token punctuation\">.</span>allData<span class=\"token punctuation\">.</span>plans<span class=\"token punctuation\">[</span>_activeIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>segments<span class=\"token punctuation\">;</span>\n    _this<span class=\"token punctuation\">.</span><span class=\"token function\">clearBusDetailFoldState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"4-事件如何处理\" style=\"position:relative;\"><a href=\"#4-%E4%BA%8B%E4%BB%B6%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86\" aria-label=\"4 事件如何处理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 事件如何处理</h2>\n<p>估计你也能猜到，发生的问题是事件绑定了很多次，比如上传点击 input 监听 change 事件，突然显示了多张相同图片的问题。</p>\n<p>也就是说，DOM 在编译后就缓存在内容中了，如果再次进入还再进行事件绑定初始化则就会发生这个问题。</p>\n<p>解决办法：在 mounted 中绑定事件，因为这个只执行一次，并且 DOM 已准备好。如果插件绑定后还要再执行一下事件的 handler 函数的话，那就提取出来，放在 activated 中执行。比如：根据输入内容自动增长 textarea 的高度，这部分需要监听 textarea 的 input 和 change 事件，并且页面进入后还要再次执行一次 handler 函数，更新 textarea 高度（避免上次输入的影响）。</p>\n<h2 id=\"5-地图组件处理\" style=\"position:relative;\"><a href=\"#5-%E5%9C%B0%E5%9B%BE%E7%BB%84%E4%BB%B6%E5%A4%84%E7%90%86\" aria-label=\"5 地图组件处理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 地图组件处理</h2>\n<p>想必这是使用<code class=\"language-text\">keep-alive</code>最直接的性能表现。之前是进入地图页面后进行地图渲染+线路标记；现在是清除以前的线路标记绘制新的线路，性能优化可想而知！</p>\n<p>我这里使用的是高德地图，在 mounted 中初始化 map，代码示例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"transferMap\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      map<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">initData</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">searchTransfer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 地图渲染 这个在transfer-map.html中使用</span>\n    <span class=\"token function-variable function\">renderTransferMap</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">transferMap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">mounted</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AMap<span class=\"token punctuation\">.</span>Map</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"container\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      showBuildingBlock<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      animateEnable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      resizeEnable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      zoom<span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token comment\">//地图显示的缩放级别</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">activated</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    _this<span class=\"token punctuation\">.</span><span class=\"token function\">initData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 设置title</span>\n    <span class=\"token function\">setDocumentTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"换乘地图\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _this<span class=\"token punctuation\">.</span><span class=\"token function\">searchTransfer</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>policyType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 数据加载完成</span>\n      <span class=\"token comment\">// 换乘地图页面</span>\n      <span class=\"token keyword\">let</span> transferMap <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>plans<span class=\"token punctuation\">[</span>_this<span class=\"token punctuation\">.</span>activeIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      transferMap<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n      transferMap<span class=\"token punctuation\">.</span>destination <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 填数据</span>\n      _this<span class=\"token punctuation\">.</span>transferMap <span class=\"token operator\">=</span> transferMap<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 地图渲染</span>\n      _this<span class=\"token punctuation\">.</span><span class=\"token function\">renderTransferMap</span><span class=\"token punctuation\">(</span>transferMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">deactivated</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 清理地图之前的标记</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">clearMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"6-documenttitle-修改\" style=\"position:relative;\"><a href=\"#6-documenttitle-%E4%BF%AE%E6%94%B9\" aria-label=\"6 documenttitle 修改 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. document.title 修改</h2>\n<p>这个不是<code class=\"language-text\">keep-alive</code>的问题，不过我也在这里分享下。</p>\n<p>问题是，使用下面这段方法，可以修改 Title，但是页面来回切换多次后就不生效了，我也不知道为啥，放到 setTimeout 中就直接不执行。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">document.title = &#39;页面名称&#39;;</code></pre></div>\n<p>下面是使用 2 种环境的修复方法：</p>\n<p>纯 js 实现</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setDocumentTitle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//以下代码可以解决以上问题，不依赖jq</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//利用iframe的onload事件刷新页面</span>\n    document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iframe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"/favicon.ico\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 必须</span>\n    iframe<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>visibility <span class=\"token operator\">=</span> <span class=\"token string\">\"hidden\"</span><span class=\"token punctuation\">;</span>\n    iframe<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">\"1px\"</span><span class=\"token punctuation\">;</span>\n    iframe<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\"1px\"</span><span class=\"token punctuation\">;</span>\n    iframe<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>iframe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>jQuery/Zepto 实现</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">setDocumentTitle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//需要jQuery</span>\n  <span class=\"token keyword\">var</span> $body <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// hack在微信等webview中无法修改document.title的情况</span>\n  <span class=\"token keyword\">var</span> $iframe <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;iframe src=\"/favicon.ico\">&lt;/iframe>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  $iframe\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        $iframe<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">appendTo</span><span class=\"token punctuation\">(</span>$body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上内容的更新请查看我的博客，<a href=\"http://xiangsongtao.com/article/5853b2c0044bf1353af82fbf\" target=\"_target\" rel=\"nofollow\">点这里</a>。</p>\n<p>(完)</p>","timeToRead":6,"wordCount":{"paragraphs":29,"sentences":29,"words":232},"fields":{"slug":"/lu-you-kai-qi-keep-alive-shi-de/","relativePath":"2016/2016-12-16---lu-you-kai-qi-keep-alive-shi-de/index.md"},"excerpt":"这个不是业务的要求，但是看到每次进入页面就重新渲染 DOM 然后再获取数据更新 DOM，觉得作为一个前端工程师有必要优化下的加载逻辑，正好 vue…","frontmatter":{"title":"路由开启keep-alive时的注意点","date":"16 Dec 2016","tags":["Vue"],"cover":"","comments":true,"author":"烈风裘"}}},"pageContext":{"curr":"/VueIntroduce/","prev":"/lu-you-kai-qi-keep-alive-shi-de/","next":"/WebStorm-zhong-dui-Vue-de-d/"}},"staticQueryHashes":["3240721340","63159454"]}