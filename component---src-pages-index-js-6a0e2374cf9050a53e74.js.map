{"version":3,"sources":["webpack:///./src/components/Pagination.js","webpack:///./src/pages/index.js","webpack:///./src/components/Avatar.js","webpack:///./src/components/ExcerptLoop.js"],"names":["Pagination","render","this","props","skip","limit","total","pathPrefix","page","pages","Math","ceil","prev","next","className","to","React","PureComponent","Index","edges","totalCount","pageContext","cover","navigation","description","title","logo","authorList","data","allAuthorJson","map","item","id","node","avatar","location","classNames","paged","hideNavBack","isPost","role","pageQuery","Avatar","name","avatarUrl","indexOf","withPrefix","src","alt","ExcerptLoop","edge","slug","fields","post","frontmatter","excerpt","authorId","author","find","Tags","tags","tag","key","kebabCase","On","Author","featured","star","date"],"mappings":"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","file":"component---src-pages-index-js-6a0e2374cf9050a53e74.js","sourcesContent":["import React from 'react';\nimport { Link } from \"gatsby\";\nimport PropTypes from 'prop-types';\n\nexport default class Pagination extends React.PureComponent {\n  render() {\n    const { skip = 0, limit = 10, total, pathPrefix = '/page/' } = this.props;\n    const page = skip / limit + 1;\n    const pages = Math.ceil(total / limit);\n    const prev = page - 1 > 0 ? `${pathPrefix}${page - 1}` : null;\n    const next = pages > page ? `${pathPrefix}${page + 1}` : null;\n\n    return (\n      <nav className=\"pagination\">\n        <div className=\"inner\">\n          {prev && (\n            <Link className=\"pagination-prev\" to={prev}>\n              <i className=\"icon icon-arrow-left\" />\n              <span className=\"pagination-label\">Newer Posts</span>\n            </Link>\n          )}\n          {pages && (\n            <span className=\"pagination-info\">\n              Page {page} of {pages}\n            </span>\n          )}\n          {next && (\n            <Link className=\"pagination-next\" to={next}>\n              <span className=\"pagination-label\">Older Posts</span>\n              <i className=\"icon icon-arrow-right\" />\n            </Link>\n          )}\n          <div className=\"clear\" />\n        </div>\n      </nav>\n    );\n  }\n}\n\nPagination.propTypes = {\n  pathPrefix: PropTypes.string,\n  skip: PropTypes.number,\n  limit: PropTypes.number,\n  total: PropTypes.number,\n};\n","import React from \"react\"\nimport _ from \"lodash\"\nimport classNames from \"classnames\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\nimport ExcerptLoop from \"../components/ExcerptLoop\"\nimport Pagination from \"../components/Pagination\"\nimport Header from \"../components/Header\"\nimport Layout from \"../components/Layout\"\nimport { graphql } from \"gatsby\"\nimport SEO from \"../components/SEO\"\nexport default class Index extends React.PureComponent {\n  render() {\n    const { edges } = _.get(this.props, \"data.currentMarkdownRemark\", {})\n    const { totalCount } = _.get(this.props, \"data.allMarkdownRemark\", {})\n\n    const { skip = 0, limit = 10 } = this.props.pageContext || {}\n    const { cover, navigation, description, title, logo } = _.get(\n      this.props,\n      \"data.site.siteMetadata\",\n      {}\n    )\n\n    const authorList = this.props.data.allAuthorJson.edges.map(item => {\n      return {\n        id: item.node.id,\n        avatar: item.node.avatar,\n      }\n    })\n\n    return (\n      <Layout location={this.props.location}>\n        <div className={classNames(\"home-template\", { paged: skip > 0 })}>\n          <SEO title={title} />\n          <Header\n            logo={logo}\n            cover={cover}\n            hideNavBack\n            navigation={navigation}\n            isPost={false}\n          >\n            <h1 className=\"blog-name\">\n              <Link to=\"/\">{title}</Link>\n            </h1>\n            {description && (\n              <span className=\"blog-description\">{description}</span>\n            )}\n          </Header>\n          <div id=\"index\" className=\"container\">\n            <main\n              className={classNames(\"content\", { paged: skip > 0 })}\n              role=\"main\"\n            >\n              <div className=\"extra-pagination\">\n                <Pagination\n                  skip={skip}\n                  limit={limit}\n                  total={totalCount}\n                  pathPrefix=\"/page/\"\n                />\n              </div>\n              <ExcerptLoop edges={edges} authorList={authorList} />\n              <Pagination\n                skip={skip}\n                limit={limit}\n                total={totalCount}\n                pathPrefix=\"/page/\"\n              />\n            </main>\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.object.isRequired,\n}\n\n/* eslint-disable */\nexport const pageQuery = graphql`\n  query IndexQuery($skip: Int = 0, $limit: Int = 10) {\n    site {\n      siteMetadata {\n        title\n        cover\n        author\n        description\n        keywords\n        tagCover\n        archiveCover\n        siteUrl\n        logo\n        navigation\n        subscribe\n      }\n    }\n    allAuthorJson {\n      totalCount\n      edges {\n        node {\n          id\n          avatar\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      totalCount\n    }\n    currentMarkdownRemark: allMarkdownRemark(\n      skip: $skip\n      limit: $limit\n      filter: { frontmatter: { draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tags\n            star\n            date(formatString: \"DD MMM YYYY\")\n            author\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react';\nimport withPrefix from '../utils/with-prefix';\nimport PropTypes from 'prop-types';\n\nexport default class Avatar extends React.PureComponent {\n  render() {\n    const { avatar, name, className } = this.props;\n    const avatarUrl =\n      avatar && avatar.indexOf('http') > -1 ? avatar : withPrefix(avatar);\n    return (\n      <figure className={className} title={name}>\n        {avatar && <img src={avatarUrl} alt={name} />}\n      </figure>\n    );\n  }\n}\n\nAvatar.propTypes = {\n  avatar: PropTypes.string,\n};\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport kebabCase from \"lodash.kebabcase\"\nimport classNames from \"classnames\"\nimport PropTypes from \"prop-types\"\nimport Avatar from \"./Avatar\"\n\nexport default class ExcerptLoop extends React.PureComponent {\n  render() {\n    const { edges, authorList } = this.props\n\n    return (\n      <section>\n        {edges &&\n          edges.map(edge => {\n            const { slug } = edge.node.fields\n            const post = edge.node.frontmatter\n            const excerpt = edge.node.excerpt\n            const authorId = post.author\n\n            const author = authorList.find(item => item.id === authorId)\n\n            if (!author) {\n              return null\n            }\n\n            const Tags = () => {\n              return post.tags\n                ? post.tags.map(tag => {\n                    return (\n                      <span key={tag}>\n                        <Link to={`/tag/${kebabCase(tag)}/`}>{tag}</Link>&ensp;\n                      </span>\n                    )\n                  })\n                : null\n            }\n\n            const On = () => {\n              return post.tags && author.id && \"on \"\n            }\n\n            const Author = () => {\n              return (\n                author.id && (\n                  <span>\n                    <Link to={`/author/${kebabCase(author.id)}/`}>\n                      {author.id}\n                    </Link>\n                    &ensp;\n                    <On />\n                  </span>\n                )\n              )\n            }\n\n            return (\n              <article\n                className={classNames(\"post\", { featured: post.star })}\n                key={`${post.title}-${post.date}`}\n              >\n                <div className=\"inner\">\n                  <header className=\"post-header\">\n                    <h2 className=\"post-title\">\n                      <Link to={slug}>{post.title}</Link>\n                    </h2>\n                    <div className=\"post-meta\">\n                      {author.avatar && (\n                        <div className=\"post-meta-avatar\">\n                          <Avatar\n                            className=\"post-other-avatar avatar\"\n                            name={author.id}\n                            avatar={author.avatar}\n                          />\n                        </div>\n                      )}\n                      <div className=\"post-meta-inner\">\n                        <Author />\n                        <Tags />\n                        |&ensp;\n                        <time>{post.date}</time>\n                      </div>\n                    </div>\n                    <div className=\"clear\" />\n                  </header>\n\n                  <section className=\"post-excerpt\">\n                    <p>{excerpt}&hellip;</p>\n                  </section>\n                </div>\n              </article>\n            )\n          })}\n      </section>\n    )\n  }\n}\n\nExcerptLoop.propTypes = {\n  edges: PropTypes.array.isRequired,\n}\n"],"sourceRoot":""}