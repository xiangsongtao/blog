{"version":3,"sources":["webpack:///./src/templates/tag-page.js","webpack:///./src/components/Pagination.js","webpack:///./src/components/Avatar.js","webpack:///./src/components/ExcerptLoop.js"],"names":["TagRoute","render","this","props","data","currentMarkdownRemark","allMarkdownRemark","site","edges","siteMetadata","title","cover","tagCover","navigation","logo","totalCount","tag","pageContext","coverImage","skip","limit","kebabCaseName","kebabCase","authorList","allAuthorJson","map","item","id","node","avatar","className","location","hideNavBack","isPost","classNames","paged","role","total","pathPrefix","React","PureComponent","pageQuery","Pagination","page","pages","Math","ceil","prev","next","to","Avatar","name","avatarUrl","indexOf","withPrefix","src","alt","ExcerptLoop","edge","slug","fields","post","frontmatter","excerpt","authorId","author","find","Tags","tags","key","On","Author","featured","star","date"],"mappings":"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","file":"component---src-templates-tag-page-js-a75cd282ca4e095207c9.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport kebabCase from \"lodash.kebabcase\"\nimport classNames from \"classnames\"\nimport ExcerptLoop from \"../components/ExcerptLoop\"\nimport Header from \"../components/Header\"\nimport Pagination from \"../components/Pagination\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/SEO\"\nexport default class TagRoute extends React.PureComponent {\n  render() {\n    const { currentMarkdownRemark, allMarkdownRemark, site } =\n      this.props.data || {}\n    const { edges } = currentMarkdownRemark\n    const { title, cover, tagCover, navigation, logo } = site.siteMetadata\n    const { totalCount } = allMarkdownRemark || {}\n    const { tag } = this.props.pageContext\n    const coverImage = tagCover || (cover || false)\n\n    const { skip = 0, limit = 10 } = this.props.pageContext\n    const kebabCaseName = kebabCase(tag)\n\n    const authorList = this.props.data.allAuthorJson.edges.map(item => {\n      return {\n        id: item.node.id,\n        avatar: item.node.avatar,\n      }\n    })\n    return (\n      <Layout className=\"tag-template\" location={this.props.location}>\n        <SEO title={`${title}-Tag`} />\n        <Header\n          cover={coverImage}\n          logo={logo}\n          hideNavBack={false}\n          navigation={navigation}\n          isPost={false}\n        >\n          <h1 className=\"blog-name\">{tag}</h1>\n          <span className=\"blog-description\">Posts: {totalCount}</span>\n        </Header>\n        <div className=\"container\">\n          <main\n            className={classNames(\"content\", { paged: skip > 0 })}\n            role=\"main\"\n          >\n            <div className=\"extra-pagination\">\n              <Pagination\n                skip={skip}\n                limit={limit}\n                total={totalCount}\n                pathPrefix={`/tag/${kebabCaseName}/`}\n              />\n            </div>\n            <ExcerptLoop edges={edges} authorList={authorList} />\n            <Pagination\n              skip={skip}\n              limit={limit}\n              total={totalCount}\n              pathPrefix={`/tag/${kebabCaseName}/`}\n            />\n          </main>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nTagRoute.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.object.isRequired,\n}\n\n/* eslint-disable */\nexport const pageQuery = graphql`\n  query TagPage($tag: String, $skip: Int = 0, $limit: Int = 10) {\n    site {\n      siteMetadata {\n        title\n        cover\n        author\n        description\n        keywords\n        tagCover\n        archiveCover\n        siteUrl\n        logo\n        navigation\n        subscribe\n      }\n    }\n    master: authorJson(master: { eq: true }) {\n      id\n    }\n    allAuthorJson {\n      totalCount\n      edges {\n        node {\n          id\n          avatar\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n      sort: { order: DESC, fields: [frontmatter___date] }\n    ) {\n      totalCount\n    }\n    currentMarkdownRemark: allMarkdownRemark(\n      skip: $skip\n      limit: $limit\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            tags\n            star\n            date(formatString: \"DD MMM YYYY\")\n            author\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react';\nimport { Link } from \"gatsby\";\nimport PropTypes from 'prop-types';\n\nexport default class Pagination extends React.PureComponent {\n  render() {\n    const { skip = 0, limit = 10, total, pathPrefix = '/page/' } = this.props;\n    const page = skip / limit + 1;\n    const pages = Math.ceil(total / limit);\n    const prev = page - 1 > 0 ? `${pathPrefix}${page - 1}` : null;\n    const next = pages > page ? `${pathPrefix}${page + 1}` : null;\n\n    return (\n      <nav className=\"pagination\">\n        <div className=\"inner\">\n          {prev && (\n            <Link className=\"pagination-prev\" to={prev}>\n              <i className=\"icon icon-arrow-left\" />\n              <span className=\"pagination-label\">Newer Posts</span>\n            </Link>\n          )}\n          {pages && (\n            <span className=\"pagination-info\">\n              Page {page} of {pages}\n            </span>\n          )}\n          {next && (\n            <Link className=\"pagination-next\" to={next}>\n              <span className=\"pagination-label\">Older Posts</span>\n              <i className=\"icon icon-arrow-right\" />\n            </Link>\n          )}\n          <div className=\"clear\" />\n        </div>\n      </nav>\n    );\n  }\n}\n\nPagination.propTypes = {\n  pathPrefix: PropTypes.string,\n  skip: PropTypes.number,\n  limit: PropTypes.number,\n  total: PropTypes.number,\n};\n","import React from 'react';\nimport withPrefix from '../utils/with-prefix';\nimport PropTypes from 'prop-types';\n\nexport default class Avatar extends React.PureComponent {\n  render() {\n    const { avatar, name, className } = this.props;\n    const avatarUrl =\n      avatar && avatar.indexOf('http') > -1 ? avatar : withPrefix(avatar);\n    return (\n      <figure className={className} title={name}>\n        {avatar && <img src={avatarUrl} alt={name} />}\n      </figure>\n    );\n  }\n}\n\nAvatar.propTypes = {\n  avatar: PropTypes.string,\n};\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport kebabCase from \"lodash.kebabcase\"\nimport classNames from \"classnames\"\nimport PropTypes from \"prop-types\"\nimport Avatar from \"./Avatar\"\n\nexport default class ExcerptLoop extends React.PureComponent {\n  render() {\n    const { edges, authorList } = this.props\n\n    return (\n      <section>\n        {edges &&\n          edges.map(edge => {\n            const { slug } = edge.node.fields\n            const post = edge.node.frontmatter\n            const excerpt = edge.node.excerpt\n            const authorId = post.author\n\n            const author = authorList.find(item => item.id === authorId)\n\n            if (!author) {\n              return null\n            }\n\n            const Tags = () => {\n              return post.tags\n                ? post.tags.map(tag => {\n                    return (\n                      <span key={tag}>\n                        <Link to={`/tag/${kebabCase(tag)}/`}>{tag}</Link>&ensp;\n                      </span>\n                    )\n                  })\n                : null\n            }\n\n            const On = () => {\n              return post.tags && author.id && \"on \"\n            }\n\n            const Author = () => {\n              return (\n                author.id && (\n                  <span>\n                    <Link to={`/author/${kebabCase(author.id)}/`}>\n                      {author.id}\n                    </Link>\n                    &ensp;\n                    <On />\n                  </span>\n                )\n              )\n            }\n\n            return (\n              <article\n                className={classNames(\"post\", { featured: post.star })}\n                key={`${post.title}-${post.date}`}\n              >\n                <div className=\"inner\">\n                  <header className=\"post-header\">\n                    <h2 className=\"post-title\">\n                      <Link to={slug}>{post.title}</Link>\n                    </h2>\n                    <div className=\"post-meta\">\n                      {author.avatar && (\n                        <div className=\"post-meta-avatar\">\n                          <Avatar\n                            className=\"post-other-avatar avatar\"\n                            name={author.id}\n                            avatar={author.avatar}\n                          />\n                        </div>\n                      )}\n                      <div className=\"post-meta-inner\">\n                        <Author />\n                        <Tags />\n                        |&ensp;\n                        <time>{post.date}</time>\n                      </div>\n                    </div>\n                    <div className=\"clear\" />\n                  </header>\n\n                  <section className=\"post-excerpt\">\n                    <p>{excerpt}&hellip;</p>\n                  </section>\n                </div>\n              </article>\n            )\n          })}\n      </section>\n    )\n  }\n}\n\nExcerptLoop.propTypes = {\n  edges: PropTypes.array.isRequired,\n}\n"],"sourceRoot":""}